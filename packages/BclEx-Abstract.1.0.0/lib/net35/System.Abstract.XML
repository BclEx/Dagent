<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Abstract</name>
    </assembly>
    <members>
        <member name="T:System.Abstract.ServiceBusMessageException">
            <summary>
            ServiceBusMessageException
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceBusMessageException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceBusMessageException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusMessageException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceBusMessageException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceBusMessageException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
              </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
              </exception>
        </member>
        <member name="P:System.Abstract.ServiceBusMessageException.MessageType">
            <summary>
            Gets or sets the type of the message.
            </summary>
            <value>
            The type of the message.
            </value>
        </member>
        <member name="T:System.Abstract.IServiceMessageHandler`1">
            <summary>
            IServiceMessageHandler
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceMessageHandler`1.Handle(`0)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Contoso.Abstract.Micro.JsonSerializationException">
            <summary>
            JsonSerializationException
            </summary>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonSerializationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonSerializationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonSerializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
              </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
              </exception>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
              </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
              </PermissionSet>
        </member>
        <member name="T:Contoso.Abstract.Micro.JsonDeserializationException">
            <summary>
            JsonDeserializationException
            </summary>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonDeserializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonDeserializationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonDeserializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonDeserializationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonDeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonDeserializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
              </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
              </exception>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonDeserializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
              </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
              </PermissionSet>
        </member>
        <member name="T:Contoso.Abstract.Micro.JsonSerializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer.#ctor(Contoso.Abstract.Micro.JsonValueType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonSerializer"/> class.
            </summary>
            <param name="serializerType">Type of the serializer.</param>
            <param name="defaultFormat">The default format.</param>
        </member>
        <member name="P:Contoso.Abstract.Micro.JsonSerializer.SerializerType">
            <summary>
            Gets the type of the serializer.
            </summary>
            <value>
            The type of the serializer.
            </value>
        </member>
        <member name="P:Contoso.Abstract.Micro.JsonSerializer.DefaultFormat">
            <summary>
            Gets the default format.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.IStreamLogServiceLog">
            <summary>
            IStreamLogServiceLog
            </summary>
        </member>
        <member name="T:System.Abstract.IServiceLog">
            <summary>
            IServiceLog
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceLog.Get(System.String)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLog.Get(System.Type)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLog.Write(System.Abstract.ServiceLog.LogLevel,System.Exception,System.String)">
            <summary>
            Writes the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
        </member>
        <member name="P:System.Abstract.IServiceLog.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Contoso.Abstract.IStreamLogServiceLog.Log">
            <summary>
            Gets the log.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.StreamServiceLog">
            <summary>
            StreamServiceLog
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.ServiceManagerBase`3.ISetupRegistration">
            <summary>
            ISetupRegistration
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.ServiceManagerBase`3">
            <summary>
            ServiceManagerBase
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.IServiceManager">
            <summary>
            IServiceManager
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.MakeByProviderProtected(System.Func{`0},System.Abstract.Parts.ServiceManagerBase{`0,`1,`2}.ISetupDescriptor)">
            <summary>
            Makes the by provider protected.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="F:System.Abstract.Parts.ServiceManagerBase`3.LazyValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.RegisterInstance``1(``0,System.Abstract.IServiceLocator,System.String)">
            <summary>
            RegisterInstance
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.ApplySetup(System.Lazy{`0},`0)">
            <summary>
            ApplySetup
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.ApplyChange(System.Lazy{`0},System.Abstract.Parts.ServiceManagerBase{`0,`1,`2}.ISetupDescriptor)">
            <summary>
            ApplyChanges
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.GetSetupDescriptorProtected(System.Lazy{`0},System.Abstract.Parts.ServiceManagerBase{`0,`1,`2}.ISetupDescriptor)">
            <summary>
            GetSetupDescriptorProtected
            </summary>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerBase`3.Lazy">
            <summary>
            Gets or sets the lazy.
            </summary>
            <value>
            The lazy.
            </value>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerBase`3.Debugger">
            <summary>
            Gets or sets the debugger.
            </summary>
            <value>
            The debugger.
            </value>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerBase`3.Registration">
            <summary>
            Gets or sets the registration.
            </summary>
            <value>
            The registration.
            </value>
        </member>
        <member name="T:System.Abstract.Parts.ServiceManagerBase`3.ISetupRegistration">
            <summary>
            ISetupRegistration
            </summary>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerBase`3.ISetupRegistration.DefaultServiceRegistrar">
            <summary>
            Gets the on service registrar.
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.ServiceManagerBase`3.ServiceRegistration">
            <summary>
            ServiceRegistration
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.ServiceRegistration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.Parts.ServiceManagerBase`3.ServiceRegistration"/> class.
            </summary>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerBase`3.ServiceRegistration.OnSetup">
            <summary>
            Gets or sets the on setup.
            </summary>
            <value>
            The on setup.
            </value>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerBase`3.ServiceRegistration.OnChange">
            <summary>
            Gets or sets the on change.
            </summary>
            <value>
            The on change.
            </value>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerBase`3.ServiceRegistration.DefaultServiceRegistrar">
            <summary>
            Gets or sets the on service registrar.
            </summary>
            <value>
            The on service registrar.
            </value>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerBase`3.ServiceRegistration.MakeAction">
            <summary>
            Gets or sets the make action.
            </summary>
            <value>
            The make action.
            </value>
        </member>
        <member name="T:System.Abstract.Parts.ServiceManagerBase`3.ISetupDescriptor">
            <summary>
            ISetupDescriptor
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.ISetupDescriptor.Do(System.Action{`0})">
            <summary>
            Does the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.ISetupDescriptor.Do(`1)">
            <summary>
            Does the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.ISetupDescriptor.RegisterWithServiceLocator``1(System.Lazy{`0},System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.ISetupDescriptor.RegisterWithServiceLocator(System.Lazy{`0},System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.ISetupDescriptor.RegisterWithServiceLocator``1(System.Lazy{`0},System.Abstract.IServiceLocator,System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.ISetupDescriptor.RegisterWithServiceLocator(System.Lazy{`0},System.Abstract.IServiceLocator,System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerBase`3.ISetupDescriptor.Actions">
            <summary>
            Gets the actions.
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.ServiceManagerBase`3.SetupDescriptor">
            <summary>
            LazySetupDescriptor
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerBase`3.SetupDescriptor.#ctor(System.Abstract.Parts.ServiceManagerBase{`0,`1,`2}.ServiceRegistration,System.Action{System.Abstract.Parts.ServiceManagerBase{`0,`1,`2}.ISetupDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.Parts.ServiceManagerBase`3.SetupDescriptor"/> class.
            </summary>
            <param name="registration">The registration.</param>
            <param name="postAction">The post action.</param>
        </member>
        <member name="M:Contoso.Abstract.StreamServiceLog.#ctor(System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.StreamServiceLog"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:Contoso.Abstract.StreamServiceLog.#ctor(System.String,System.IO.StreamWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.StreamServiceLog"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="sw">The sw.</param>
        </member>
        <member name="M:Contoso.Abstract.StreamServiceLog.#ctor(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.StreamServiceLog"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="s">The s.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Contoso.Abstract.StreamServiceLog.#ctor(System.String,System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.StreamServiceLog"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="s">The s.</param>
            <param name="encoding">The encoding.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:Contoso.Abstract.StreamServiceLog.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Contoso.Abstract.StreamServiceLog"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Contoso.Abstract.StreamServiceLog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Contoso.Abstract.StreamServiceLog.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Contoso.Abstract.StreamServiceLog.Get(System.String)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.StreamServiceLog.Get(System.Type)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.StreamServiceLog.Write(System.Abstract.ServiceLog.LogLevel,System.Exception,System.String)">
            <summary>
            Writes the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
        </member>
        <member name="P:Contoso.Abstract.StreamServiceLog.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Contoso.Abstract.StreamServiceLog.Log">
            <summary>
            Gets the log.
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.ITypeCache">
            <summary>
            ITypeCache
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ITypeCache.GetFilteredTypesFromAssemblies(System.String,System.Predicate{System.Type})">
            <summary>
            Gets the filtered types from assemblies.
            </summary>
            <param name="cacheName">Name of the cache.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.ITypeCache.GetFilteredTypesFromAssemblies(System.String,System.Predicate{System.Type},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the filtered types from assemblies.
            </summary>
            <param name="cacheName">Name of the cache.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.IServiceRegistrarBehaviorAccessor">
            <summary>
            IServiceRegistrarBehaviorAccessor
            </summary>
        </member>
        <member name="P:System.Abstract.IServiceRegistrarBehaviorAccessor.RegisterInLocator">
            <summary>
            Gets a value indicating whether [register in locator].
            </summary>
            <value>
              <c>true</c> if [register in locator]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Abstract.IServiceRegistrarBehaviorAccessor.Lifetime">
            <summary>
            Gets or sets the lifetime.
            </summary>
            <value>
            The lifetime.
            </value>
        </member>
        <member name="T:System.Abstract.ServiceCacheOptions">
            <summary>
            ServiceCacheOptions
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceCacheOptions.ReturnsCachedValueOnRemove">
            <summary>
            ReturnsCachedValueOnRemove
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceCacheOptions.UseDBNullWithRegistrations">
            <summary>
            UseDBNullWithRegistrations
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceBusExtensions">
            <summary>
            ServiceBusExtensions
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Send``1(System.Abstract.IServiceBus,System.Action{``0})">
            <summary>
            Sends the specified service bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="serviceBus">The service bus.</param>
            <param name="messageBuilder">The message builder.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Send``1(System.Abstract.IServiceBus,System.String,System.Action{``0})">
            <summary>
            Sends the specified service bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="serviceBus">The service bus.</param>
            <param name="destination">The destination.</param>
            <param name="messageBuilder">The message builder.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Send``1(System.Abstract.IServiceBus,System.Abstract.IServiceBusEndpoint,System.Action{``0})">
            <summary>
            Sends the specified service bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="serviceBus">The service bus.</param>
            <param name="destination">The destination.</param>
            <param name="messageBuilder">The message builder.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Send(System.Abstract.IServiceBus,System.Object[])">
            <summary>
            Sends the specified service bus.
            </summary>
            <param name="serviceBus">The service bus.</param>
            <param name="messages">The messages.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Send(System.Abstract.IServiceBus,System.String,System.Object[])">
            <summary>
            Sends the specified service bus.
            </summary>
            <param name="serviceBus">The service bus.</param>
            <param name="destination">The destination.</param>
            <param name="messages">The messages.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Reply``1(System.Abstract.IServiceBus,System.Action{``0})">
            <summary>
            Replies the specified service bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="serviceBus">The service bus.</param>
            <param name="messageBuilder">The message builder.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Publish``1(System.Abstract.IPublishingServiceBus,System.Action{``0})">
            <summary>
            Publishes the specified service bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="serviceBus">The service bus.</param>
            <param name="messageBuilder">The message builder.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Subscribe``1(System.Abstract.IPublishingServiceBus)">
            <summary>
            Subscribes the specified service bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="serviceBus">The service bus.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Subscribe``1(System.Abstract.IPublishingServiceBus,System.Predicate{``0})">
            <summary>
            Subscribes the specified service bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="serviceBus">The service bus.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Subscribe(System.Abstract.IPublishingServiceBus,System.Type)">
            <summary>
            Subscribes the specified service bus.
            </summary>
            <param name="serviceBus">The service bus.</param>
            <param name="messageType">Type of the message.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.Unsubscribe``1(System.Abstract.IPublishingServiceBus)">
            <summary>
            Unsubscribes the specified service bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="serviceBus">The service bus.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.BehaveAs``1(System.Abstract.IServiceBus)">
            <summary>
            Behaves as.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceBus})">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceBus},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceBus},System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceBus},System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceBus})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceBus},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceBus},System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceBus},System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceBus},System.Abstract.IServiceLocator)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceBus},System.Abstract.IServiceLocator,System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceBus},System.Abstract.IServiceLocator)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceBus},System.Abstract.IServiceLocator,System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.AddEndpoint(System.Lazy{System.Abstract.IServiceBus},System.String)">
            <summary>
            Adds the endpoint.
            </summary>
            <param name="service">The service.</param>
            <param name="endpoint">The endpoint.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.AddMessageHandlersByScan(System.Lazy{System.Abstract.IServiceBus},System.Reflection.Assembly[])">
            <summary>
            Adds the message handlers by scan.
            </summary>
            <param name="service">The service.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.AddMessageHandlersByScan(System.Lazy{System.Abstract.IServiceBus},System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Adds the message handlers by scan.
            </summary>
            <param name="service">The service.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.AddMessageHandler(System.Lazy{System.Abstract.IServiceBus},System.Type)">
            <summary>
            Adds the message handler.
            </summary>
            <param name="service">The service.</param>
            <param name="handlerType">Type of the handler.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.AddMessageHandlersByScan``1(System.Abstract.IServiceBus)">
            <summary>
            Adds the message handlers by scan.
            </summary>
            <typeparam name="TMessageHandler">The type of the message handler.</typeparam>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.AddMessageHandlersByScan(System.Abstract.IServiceBus,System.Type)">
            <summary>
            Adds the message handlers by scan.
            </summary>
            <param name="bus">The bus.</param>
            <param name="handlerType">Type of the handler.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.AddMessageHandlersByScan(System.Abstract.IServiceBus,System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Adds the message handlers by scan.
            </summary>
            <param name="bus">The bus.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:System.Abstract.ServiceBusExtensions.AddMessageHandler(System.Abstract.IServiceBus,System.Type)">
            <summary>
            Adds the message handler.
            </summary>
            <param name="bus">The bus.</param>
            <param name="handlerType">Type of the handler.</param>
        </member>
        <member name="T:System.Abstract.EventSourceManagerDebugger">
            <summary>
            EventSourceManagerDebugger
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.ServiceManagerDebuggerBase`1">
            <summary>
            ServiceManagerDebugger
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ServiceManagerDebuggerBase`1.DebugStarted">
            <summary>
            Debugs the started.
            </summary>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerDebuggerBase`1.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="P:System.Abstract.Parts.ServiceManagerDebuggerBase`1.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
            <value>
            The flags.
            </value>
        </member>
        <member name="M:System.Abstract.EventSourceManagerDebugger.DebugStarted">
            <summary>
            Debugs the started.
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourceManagerDebugger.DebuggerFlags">
            <summary>
            DebuggerFlags
            </summary>
        </member>
        <member name="T:System.Reflection.AssemblyExtensions">
            <summary>
            AssemblyExtensions
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.AsTypes(System.Reflection.Assembly,System.Predicate{System.Type})">
            <summary>
            Ases the types.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.AsConcreteTypes``1(System.Reflection.Assembly)">
            <summary>
            Ases the concrete types.
            </summary>
            <typeparam name="TBasedOn">The type of the based on.</typeparam>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.AsConcreteTypes``1(System.Reflection.Assembly,System.Predicate{System.Type})">
            <summary>
            Ases the concrete types.
            </summary>
            <typeparam name="TBasedOn">The type of the based on.</typeparam>
            <param name="assembly">The assembly.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.AsConcreteTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            Ases the concrete types.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="basedOnType">Type of the based on.</param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.AsConcreteTypes(System.Reflection.Assembly,System.Type,System.Predicate{System.Type})">
            <summary>
            Ases the concrete types.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="basedOnType">Type of the based on.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.ServiceConfigurationExtensions">
            <summary>
            ServiceConfigurationExtensions
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceConfigurationExtensions.LoadFromConfiguration(System.Lazy{System.Abstract.IEventSource},System.Abstract.Configuration.EventSourceConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="service">The service.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceConfigurationExtensions.LoadFromConfiguration(System.Lazy{System.Abstract.IServiceBus},System.Abstract.Configuration.ServiceBusConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="service">The service.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceConfigurationExtensions.LoadFromConfiguration(System.Lazy{System.Abstract.IServiceCache},System.Abstract.Configuration.ServiceCacheConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="service">The service.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceConfigurationExtensions.LoadFromConfiguration(System.Lazy{System.Abstract.IServiceLocator},System.Abstract.Configuration.ServiceLocatorConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="service">The service.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceConfigurationExtensions.LoadFromConfiguration(System.Lazy{System.Abstract.IServiceLog},System.Abstract.Configuration.ServiceLogConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="service">The service.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceConfigurationExtensions.LoadFromConfiguration(System.Abstract.Parts.ServiceManagerBase{System.Abstract.IEventSource,System.Action{System.Abstract.IEventSource},System.Abstract.EventSourceManagerDebugger}.ISetupDescriptor,System.Lazy{System.Abstract.IEventSource},System.Abstract.Configuration.EventSourceConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="service">The service.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:System.Abstract.ServiceConfigurationExtensions.LoadFromConfiguration(System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceBus,System.Action{System.Abstract.IServiceBus},System.Abstract.ServiceBusManagerDebugger}.ISetupDescriptor,System.Lazy{System.Abstract.IServiceBus},System.Abstract.Configuration.ServiceBusConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="service">The service.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:System.Abstract.ServiceConfigurationExtensions.LoadFromConfiguration(System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceCache,System.Action{System.Abstract.IServiceCache},System.Abstract.ServiceCacheManagerDebugger}.ISetupDescriptor,System.Lazy{System.Abstract.IServiceCache},System.Abstract.Configuration.ServiceCacheConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="service">The service.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:System.Abstract.ServiceConfigurationExtensions.LoadFromConfiguration(System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceLocator,System.Action{System.Abstract.IServiceLocator},System.Abstract.ServiceLocatorManagerDebugger}.ISetupDescriptor,System.Lazy{System.Abstract.IServiceLocator},System.Abstract.Configuration.ServiceLocatorConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="service">The service.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:System.Abstract.ServiceConfigurationExtensions.LoadFromConfiguration(System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceLog,System.Action{System.Abstract.IServiceLog},System.Abstract.ServiceLogManagerDebugger}.ISetupDescriptor,System.Lazy{System.Abstract.IServiceLog},System.Abstract.Configuration.ServiceLogConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="service">The service.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:System.Patterns.ReleaseManagement.ReleaseManagementConfiguration">
            <summary>
            ReleaseManagementConfiguration
            </summary>
        </member>
        <member name="T:System.Configuration.ConfigurationElementEx">
            <summary>
            An abstract class representing a simplified configuration setting object. This provides a basic
            facade over the <see cref="T:System.Configuration.ConfigurationElement">ConfigurationElement</see> class.
            </summary>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationElementEx"/> class.
            </summary>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement"/> object is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Configuration.ConfigurationElement"/> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.Encode``1(``0)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.Encode``1(System.Object,``0)">
            <summary>
            Encodes the specified tag.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.Decode``1(``0)">
            <summary>
            Decodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.Decode``1(System.Object,``0)">
            <summary>
            Decodes the specified tag.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.ApplyConfiguration(System.Configuration.ConfigurationElement)">
            <summary>
            Applies the configuration.
            </summary>
            <param name="inheritConfiguration">The inherit configuration.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.ApplyConfigurationValues(System.Configuration.ConfigurationElement)">
            <summary>
            Applies the configuration values.
            </summary>
            <param name="inheritConfiguration">The inherit configuration.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.ApplyConfigurationElements(System.Configuration.ConfigurationElement)">
            <summary>
            Applies the configuration elements.
            </summary>
            <param name="inheritConfiguration">The inherit configuration.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.ApplyDefaultValues">
            <summary>
            Applies the default values.
            </summary>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.GetAttribute(System.String)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:System.Configuration.ConfigurationElementEx.Name">
            <summary>
            Gets or sets the name of the configuration setting.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:System.Configuration.ConfigurationElementEx.Attribute">
            <summary>
            Gets the AttributeIndex of this class.
            </summary>
            <value>
            The attribute.
            </value>
        </member>
        <member name="T:System.Collections.IIndexer`2">
            <summary>
            A generic interface providing a generically typed indexer. Allows passing of object instances implementing interface
            without explicit knowledge of the object implementation specifics.
            </summary>
            <typeparam name="TKey">Generic type of the key for the indexed object instance.</typeparam>
            <typeparam name="TValue">Generic type for the value in the indexed object instance.</typeparam>
        </member>
        <member name="P:System.Collections.IIndexer`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <value>The value associated with the specified key.</value>
        </member>
        <member name="M:System.Configuration.ConfigurationElementEx.AttributeIndex.#ctor(System.Configuration.ConfigurationElementEx)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationElementEx.AttributeIndex"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:System.Configuration.ConfigurationElementEx.AttributeIndex.Item(System.Configuration.ConfigurationProperty)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
        </member>
        <member name="P:System.Patterns.ReleaseManagement.ReleaseManagementConfiguration.DeploymentEnvironment">
            <summary>
            Gets or sets the deployment environment.
            </summary>
            <value>
            The deployment environment.
            </value>
        </member>
        <member name="P:System.Patterns.ReleaseManagement.ReleaseManagementConfiguration.DevelopmentStage">
            <summary>
            Gets or sets the development stage.
            </summary>
            <value>
            The development stage.
            </value>
        </member>
        <member name="T:Contoso.Abstract.IMicroServiceRegistrar">
            <summary>
            IMicroServiceRegistrar
            </summary>
        </member>
        <member name="T:System.Abstract.IServiceRegistrar">
            <summary>
            IServiceRegistrar
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.HasRegistered``1">
            <summary>
            Determines whether this instance has registered.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>
              <c>true</c> if this instance has registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.HasRegistered(System.Type)">
            <summary>
            Determines whether the specified service type has registered.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>
              <c>true</c> if the specified service type has registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.GetRegistrationsFor(System.Type)">
            <summary>
            Gets the registrations for.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register(System.Type)">
            <summary>
            Registers the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register(System.Type,System.String)">
            <summary>
            Registers the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register``2">
            <summary>
            Registers this instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register``2(System.String)">
            <summary>
            Registers the specified name.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register``1(System.Type)">
            <summary>
            Registers the specified implementation type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="implementationType">Type of the implementation.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register``1(System.Type,System.String)">
            <summary>
            Registers the specified implementation type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="implementationType">Type of the implementation.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register(System.Type,System.Type)">
            <summary>
            Registers the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="implementationType">Type of the implementation.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="implementationType">Type of the implementation.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.RegisterInstance``1(``0)">
            <summary>
            Registers the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.RegisterInstance``1(``0,System.String)">
            <summary>
            Registers the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers the instance.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers the instance.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="instance">The instance.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register``1(System.Func{System.Abstract.IServiceLocator,``0})">
            <summary>
            Registers the specified factory method.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="factoryMethod">The factory method.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register``1(System.Func{System.Abstract.IServiceLocator,``0},System.String)">
            <summary>
            Registers the specified factory method.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="factoryMethod">The factory method.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register(System.Type,System.Func{System.Abstract.IServiceLocator,System.Object})">
            <summary>
            Registers the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="factoryMethod">The factory method.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.Register(System.Type,System.Func{System.Abstract.IServiceLocator,System.Object},System.String)">
            <summary>
            Registers the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="factoryMethod">The factory method.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.IServiceRegistrar.RegisterInterceptor(System.Abstract.IServiceLocatorInterceptor)">
            <summary>
            Registers the interceptor.
            </summary>
            <param name="interceptor">The interceptor.</param>
        </member>
        <member name="P:System.Abstract.IServiceRegistrar.Locator">
            <summary>
            Gets the locator.
            </summary>
        </member>
        <member name="P:System.Abstract.IServiceRegistrar.Registrations">
            <summary>
            Gets the registrations.
            </summary>
        </member>
        <member name="P:System.Abstract.IServiceRegistrar.LifetimeForRegisters">
            <summary>
            Gets the lifetime for registers.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.MicroServiceRegistrar">
            <summary>
            MicroServiceRegistrar
            </summary>
        </member>
        <member name="T:System.Abstract.IServiceBusEndpoint">
            <summary>
            IServiceBusEndpoint
            </summary>
        </member>
        <member name="T:System.Abstract.IServiceCache">
            <summary>
            IServiceCache
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceCache.Add(System.Object,System.String,System.Abstract.CacheItemPolicy,System.Object,System.Abstract.ServiceCacheByDispatcher)">
            <summary>
            Adds the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="itemPolicy">The item policy.</param>
            <param name="value">The value.</param>
            <param name="dispatch">The dispatch.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceCache.Get(System.Object,System.String)">
            <summary>
            Gets the item from cache associated with the key provided.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <returns>
            The cached item.
            </returns>
        </member>
        <member name="M:System.Abstract.IServiceCache.Get(System.Object,System.String,System.Abstract.IServiceCacheRegistration,System.Abstract.CacheItemHeader@)">
            <summary>
            Gets the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="registration">The registration.</param>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceCache.Get(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceCache.Get(System.Object,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the specified registration.
            </summary>
            <param name="tag">The tag.</param>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceCache.TryGet(System.Object,System.String,System.Object@)">
            <summary>
            Tries the get.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceCache.Remove(System.Object,System.String,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Removes from cache the item associated with the key provided.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="registration">The registration.</param>
            <returns>
            The item removed from the Cache. If the value in the key parameter is not found, returns null.
            </returns>
        </member>
        <member name="M:System.Abstract.IServiceCache.Set(System.Object,System.String,System.Abstract.CacheItemPolicy,System.Object,System.Abstract.ServiceCacheByDispatcher)">
            <summary>
            Adds an object into cache based on the parameters provided.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="itemPolicy">The itemPolicy object.</param>
            <param name="value">The value to store in cache.</param>
            <param name="dispatch">The dispatch.</param>
            <returns></returns>
        </member>
        <member name="P:System.Abstract.IServiceCache.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified name.
            </summary>
        </member>
        <member name="P:System.Abstract.IServiceCache.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="T:System.Abstract.CacheEntryRemovedCallback">
            <summary>
            Defines a delegate type for use by <see cref="M:Instinct.CacheCommand.OnRemoveCallback">CacheCommand.OnRemoveCallback</see>.
            Used to provide notification of removal of an item from an instance of a <see cref="T:Instinct.Cache">Cache</see> object.
            </summary>
            <param name="name">The name of the item being removed from cache.</param>
            <param name="value">Value of the item being removed from cache.</param>
        </member>
        <member name="T:System.OperatingSystemEx">
            <summary>
            OperatingSystemEx
            </summary>
        </member>
        <member name="M:System.OperatingSystemEx.#ctor(System.OperatingSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:System.OperatingSystemEx"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:System.OperatingSystemEx.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:System.OperatingSystemEx.Platform">
            <summary>
            Gets the platform.
            </summary>
        </member>
        <member name="P:System.OperatingSystemEx.ServicePack">
            <summary>
            Gets the service pack.
            </summary>
        </member>
        <member name="P:System.OperatingSystemEx.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:System.OperatingSystemEx.VersionString">
            <summary>
            Gets the version string.
            </summary>
        </member>
        <member name="P:System.OperatingSystemEx.PlatformSuites">
            <summary>
            Gets or sets the platform suites.
            </summary>
            <value>
            The platform suites.
            </value>
        </member>
        <member name="P:System.OperatingSystemEx.PlatformProductID">
            <summary>
            Gets or sets the platform product ID.
            </summary>
            <value>
            The platform product ID.
            </value>
        </member>
        <member name="T:Contoso.Abstract.Micro.JsonOptions">
            <summary>
            JsonOptions
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonOptions.QuoteNames">
            <summary>
            QuoteNames
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonOptions.EnclosingParens">
            <summary>
            EnclosingParens
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonOptions.IncludeNulls">
            <summary>
            IncludeNulls
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonOptions.Formatted">
            <summary>
            Formatted
            </summary>
        </member>
        <member name="T:Contoso.Abstract.Micro.JsonValueType">
            <summary>
            JsonValueType
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonValueType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonValueType.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonValueType.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonValueType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonValueType.Object">
            <summary>
            Object
            </summary>
        </member>
        <member name="F:Contoso.Abstract.Micro.JsonValueType.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="T:System.Configuration.ConfigurationManagerEx">
            <summary>
            ConfigurationManagerEx
            </summary>
        </member>
        <member name="M:System.Configuration.ConfigurationManagerEx.GetSection``1(System.String)">
            <summary>
            Gets the section.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationManagerEx.Encode``1(``0)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationManagerEx.Encode``1(System.Object,``0)">
            <summary>
            Encodes the specified tag.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationManagerEx.Decode``1(``0)">
            <summary>
            Decodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationManagerEx.Decode``1(System.Object,``0)">
            <summary>
            Decodes the specified tag.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationManagerEx.GetCodec``1">
            <summary>
            Gets the codec.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationManagerEx.SetCodec``1(System.ICodec{``0})">
            <summary>
            Sets the codec.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="codec">The codec.</param>
        </member>
        <member name="P:System.Configuration.ConfigurationManagerEx.AppSettings">
            <summary>
            Gets the app settings.
            </summary>
        </member>
        <member name="P:System.Configuration.ConfigurationManagerEx.ConnectionStrings">
            <summary>
            Gets the connection strings.
            </summary>
        </member>
        <member name="M:System.CoreExtensions.HookValueFactory``1(System.Lazy{``0},System.Func{System.Func{``0},``0})">
            <summary>
            Hooks the value factory.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lazy">The lazy.</param>
            <param name="valueFactory">The value factory.</param>
            <returns></returns>
        </member>
        <member name="T:System.IConvertParser">
            <summary>
            IConvertParser
            </summary>
        </member>
        <member name="M:System.IConvertParser.Parse(System.String,System.Object,System.Nparams)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="defaultValue">The default value.</param>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:System.IConvertParser.Parse(System.String,System.String,System.Nparams)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="defaultValue">The default value.</param>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:System.IConvertParser.TryParse(System.String,System.Nparams,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="text">The text.</param>
            <param name="param">The param.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:System.IO.DirectoryEx2">
            <summary>
            DirectoryEx2
            </summary>
        </member>
        <member name="M:System.IO.DirectoryEx2.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates the directory.
            </summary>
            <param name="path">The path.</param>
            <param name="directorySecurity">The directory security.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.Delete(System.String)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.Exists(System.String)">
            <summary>
            Existses the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetAccessControl(System.String)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="includeSections">The include sections.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetCurrentDirectory">
            <summary>
            Gets the current directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetDirectories(System.String)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetDirectories(System.String,System.String)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetDirectoryRoot(System.String)">
            <summary>
            Gets the directory root.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetFiles(System.String)">
            <summary>
            Gets the files.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetFiles(System.String,System.String)">
            <summary>
            Gets the files.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the files.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetFileSystemEntries(System.String)">
            <summary>
            Gets the file system entries.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the file system entries.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetLogicalDrives">
            <summary>
            Gets the logical drives.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.GetParent(System.String)">
            <summary>
            Gets the parent.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.Move(System.String,System.String)">
            <summary>
            Moves the specified source dir name.
            </summary>
            <param name="sourceDirName">Name of the source dir.</param>
            <param name="destDirName">Name of the dest dir.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Sets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="directorySecurity">The directory security.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current directory.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTimeUtc">The last access time UTC.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last write time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTimeUtc">The last write time UTC.</param>
        </member>
        <member name="P:System.IO.DirectoryEx2.Mock">
            <summary>
            Gets or sets the mock.
            </summary>
            <value>
            The mock.
            </value>
        </member>
        <member name="T:System.IO.DirectoryEx2.DirectoryWrapper">
            <summary>
            DirectoryWrapper
            </summary>
        </member>
        <member name="T:System.IO.DirectoryEx2.MockBase">
            <summary>
            MockBase
            </summary>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.DirectoryEx2.MockBase"/> class.
            </summary>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates the directory.
            </summary>
            <param name="path">The path.</param>
            <param name="directorySecurity">The directory security.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.Delete(System.String)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.Exists(System.String)">
            <summary>
            Existses the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetAccessControl(System.String)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="includeSections">The include sections.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetCurrentDirectory">
            <summary>
            Gets the current directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetDirectories(System.String)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetDirectories(System.String,System.String)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetDirectoryRoot(System.String)">
            <summary>
            Gets the directory root.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetFiles(System.String)">
            <summary>
            Gets the files.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetFiles(System.String,System.String)">
            <summary>
            Gets the files.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the files.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetFileSystemEntries(System.String)">
            <summary>
            Gets the file system entries.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the file system entries.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetLogicalDrives">
            <summary>
            Gets the logical drives.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.GetParent(System.String)">
            <summary>
            Gets the parent.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.Move(System.String,System.String)">
            <summary>
            Moves the specified source dir name.
            </summary>
            <param name="sourceDirName">Name of the source dir.</param>
            <param name="destDirName">Name of the dest dir.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Sets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="directorySecurity">The directory security.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current directory.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTimeUtc">The last access time UTC.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last write time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.MockBase.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTimeUtc">The last write time UTC.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates the directory.
            </summary>
            <param name="path">The path.</param>
            <param name="directorySecurity">The directory security.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.Delete(System.String)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.Exists(System.String)">
            <summary>
            Existses the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetAccessControl(System.String)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="includeSections">The include sections.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetCurrentDirectory">
            <summary>
            Gets the current directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetDirectories(System.String)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetDirectories(System.String,System.String)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetDirectoryRoot(System.String)">
            <summary>
            Gets the directory root.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetFiles(System.String)">
            <summary>
            Gets the files.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetFiles(System.String,System.String)">
            <summary>
            Gets the files.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the files.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetFileSystemEntries(System.String)">
            <summary>
            Gets the file system entries.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the file system entries.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetLogicalDrives">
            <summary>
            Gets the logical drives.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.GetParent(System.String)">
            <summary>
            Gets the parent.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.Move(System.String,System.String)">
            <summary>
            Moves the specified source dir name.
            </summary>
            <param name="sourceDirName">Name of the source dir.</param>
            <param name="destDirName">Name of the dest dir.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Sets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="directorySecurity">The directory security.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current directory.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTimeUtc">The last access time UTC.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last write time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:System.IO.DirectoryEx2.DirectoryWrapper.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTimeUtc">The last write time UTC.</param>
        </member>
        <member name="T:System.Abstract.EventSourcing.IAggregateRootSnapshotStore">
            <summary>
            IAggregateRootSnapshotStore
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootSnapshotStore.GetLatestSnapshot``1(System.Object)">
            <summary>
            Gets the latest snapshot.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateID">The aggregate ID.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootSnapshotStore.SaveSnapshot(System.Type,System.Abstract.EventSourcing.AggregateRootSnapshot)">
            <summary>
            Saves the snapshot.
            </summary>
            <param name="aggregateType">Type of the aggregate.</param>
            <param name="snapshot">The snapshot.</param>
        </member>
        <member name="P:System.Abstract.EventSourcing.IAggregateRootSnapshotStore.InlineSnapshotPredicate">
            <summary>
            Gets the inline snapshot predicate.
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.IAggregateRootEventDispatcher">
            <summary>
            IAggregateRootEventDispatcher
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootEventDispatcher.ApplyEvent(System.Abstract.EventSourcing.AggregateRoot,System.Abstract.EventSourcing.Event)">
            <summary>
            Applies the event.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootEventDispatcher.GetEventTypes">
            <summary>
            Gets the event types.
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.EventSourcing.AggregateRootQueryOptions">
            <summary>
            AggregateRootQueryOptions
            </summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.AggregateRootQueryOptions.UseNullAggregates">
            <summary>
            UseNullAggregates
            </summary>
        </member>
        <member name="T:Contoso.Abstract.AppServiceBusRegistration">
            <remark>
            Holds the registration information for an application service message handler
            </remark>
        </member>
        <member name="P:Contoso.Abstract.AppServiceBusRegistration.MessageHandlerType">
            <summary>
            Gets or sets the type of the message handler.
            </summary>
            <value>
            The type of the message handler.
            </value>
        </member>
        <member name="P:Contoso.Abstract.AppServiceBusRegistration.MessageType">
            <summary>
            Gets or sets the type of the message.
            </summary>
            <value>
            The type of the message.
            </value>
        </member>
        <member name="T:System.Collections.IValue`1">
            <summary>
            Generic interface used to decouple specific implementation details of an object instance and the underlying
            <see cref="P:System.Collections.IValue`1.Value"/> of the object. Allows for passing of abstract object types
            containing a modifiable unkeyed <see cref="P:System.Collections.IValue`1.Value"/> property 
            </summary>
            <typeparam name="T">Data type of the value.</typeparam>
        </member>
        <member name="P:System.Collections.IValue`1.Value">
            <summary>
            Allows Get and Set access the the underlying value of the object.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:System.Abstract.ServiceRegistrarLifetime">
            <summary>
            ServiceLocatorLifetime
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceRegistrarLifetime.Transient">
            <summary>
            Transient
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceRegistrarLifetime.Singleton">
            <summary>
            Singleton
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceRegistrarLifetime.Thread">
            <summary>
            Thread
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceRegistrarLifetime.Pooled">
            <summary>
            Pooled
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceRegistrarLifetime.Request">
            <summary>
            Request
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceRegistrarLifetime.Session">
            <summary>
            Session
            </summary>
        </member>
        <member name="T:System.Abstract.IEventSource">
            <summary>
            IEventSource
            </summary>
        </member>
        <member name="M:System.Abstract.IEventSource.MakeRepository``1(``0,System.Abstract.Parts.ITypeSerializer)">
            <summary>
            Makes the repository.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arg">The arg.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.EventSource">
            <summary>
            EventSource
            </summary>
        </member>
        <member name="M:System.Abstract.EventSource.#ctor(System.Abstract.EventSourcing.IEventStore,System.Abstract.EventSourcing.IAggregateRootSnapshotStore)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSource"/> class.
            </summary>
            <param name="eventStore">The event store.</param>
            <param name="snapshotStore">The snapshot store.</param>
        </member>
        <member name="M:System.Abstract.EventSource.#ctor(System.Abstract.EventSourcing.IEventStore,System.Abstract.EventSourcing.IAggregateRootSnapshotStore,System.Action{System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSource"/> class.
            </summary>
            <param name="eventStore">The event store.</param>
            <param name="snapshotStore">The snapshot store.</param>
            <param name="eventDispatcher">The event dispatcher.</param>
        </member>
        <member name="M:System.Abstract.EventSource.#ctor(System.Abstract.EventSourcing.IEventStore,System.Abstract.EventSourcing.IAggregateRootSnapshotStore,System.Action{System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event}},System.Func{System.Type,System.Abstract.EventSourcing.AggregateRoot})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSource"/> class.
            </summary>
            <param name="eventStore">The event store.</param>
            <param name="snapshotStore">The snapshot store.</param>
            <param name="eventDispatcher">The event dispatcher.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:System.Abstract.EventSource.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:System.Abstract.EventSource.MakeRepository``1(``0,System.Abstract.Parts.ITypeSerializer)">
            <summary>
            Makes the repository.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arg">The arg.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.EventSource.DefaultFactory">
            <summary>
            DefaultFactory
            </summary>
        </member>
        <member name="F:System.Abstract.EventSource.DefaultFactory.Factory">
            <summary>
            Factory
            </summary>
        </member>
        <member name="T:System.Local">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Local.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Local.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Local.ExceedRecurseCount">
            <summary>
              Looks up a localized string similar to ExceedRecurseCount.
            </summary>
        </member>
        <member name="P:System.Local.InvalidDataSource">
            <summary>
              Looks up a localized string similar to InvalidDataSource.
            </summary>
        </member>
        <member name="P:System.Local.InvalidDefaultServiceLocator">
            <summary>
              Looks up a localized string similar to A default ServiceLocator could not be bound. Ether setup your default service locator or specify a service locator or none..
            </summary>
        </member>
        <member name="P:System.Local.InvalidMessageTypeA">
            <summary>
              Looks up a localized string similar to Could not send messageType &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Local.InvalidServiceTypeA">
            <summary>
              Looks up a localized string similar to Could not resolve serviceType &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Local.InvalidServiceTypeAB">
            <summary>
              Looks up a localized string similar to Could not resolve serviceType &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:System.Local.RedefineCacheDependency">
            <summary>
              Looks up a localized string similar to RedefineCacheDependency.
            </summary>
        </member>
        <member name="P:System.Local.RedefineDataCacheAB">
            <summary>
              Looks up a localized string similar to RedefineDataCacheAB {0} {1}.
            </summary>
        </member>
        <member name="P:System.Local.RedefineIDA">
            <summary>
              Looks up a localized string similar to RedefineIDA {0}.
            </summary>
        </member>
        <member name="P:System.Local.RedefineNameA">
            <summary>
              Looks up a localized string similar to RedefineNameA {0}.
            </summary>
        </member>
        <member name="P:System.Local.RedefineSetupDescriptorA">
            <summary>
              Looks up a localized string similar to RedefineSetupDescriptorA {0}.
            </summary>
        </member>
        <member name="P:System.Local.ScopeCharacterNotAllowedA">
            <summary>
              Looks up a localized string similar to ScopeCharacterNotAllowedA {0}.
            </summary>
        </member>
        <member name="P:System.Local.UndefinedItemAB">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; item &apos;{1}&apos; not defined..
            </summary>
        </member>
        <member name="P:System.Local.UndefinedServiceCacheRegistrationA">
            <summary>
              Looks up a localized string similar to UndefinedServiceCacheRegistrationA {0}.
            </summary>
        </member>
        <member name="P:System.Local.UndefinedServiceCacheRegistrationAB">
            <summary>
              Looks up a localized string similar to UndefinedServiceCacheRegistrationAB {0} {1}.
            </summary>
        </member>
        <member name="P:System.Local.UndefinedServiceProviderA">
            <summary>
              Looks up a localized string similar to UndefinedServiceProviderA {0}.
            </summary>
        </member>
        <member name="T:System.INparams">
            <summary>
            INparams
            </summary>
        </member>
        <member name="M:System.INparams.AddRange(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds the range.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.INparams.ToStringArray">
            <summary>
            Toes the string array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.INparams.Slice``1(System.String,``0)">
            <summary>
            Slices the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:System.Nparams">
            <summary>
            Nparams
            </summary>
        </member>
        <member name="M:System.Nparams.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Nparams.Parse(System.Nparams)">
            <summary>
            Parses the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:System.Nparams.Parse(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parses the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:System.Nparams.Parse(System.String[])">
            <summary>
            Parses the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:System.Nparams.Parse(System.Object)">
            <summary>
            Parses the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:System.Nparams.#ctor(System.INparams)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Nparams"/> class.
            </summary>
            <param name="base">The @base.</param>
        </member>
        <member name="M:System.Nparams.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:System.Nparams.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:System.Nparams.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Nparams.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
        </member>
        <member name="P:System.Nparams.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:System.Nparams.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.IAggregateRootRepository">
            <summary>
            IAggregateRootRepository
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootRepository.GetByID``1(System.Object,System.Abstract.EventSourcing.AggregateRootQueryOptions)">
            <summary>
            Gets the by ID.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateID">The aggregate ID.</param>
            <param name="queryOptions">The query options.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootRepository.GetManyByIDs``1(System.Collections.Generic.IEnumerable{System.Object},System.Abstract.EventSourcing.AggregateRootQueryOptions)">
            <summary>
            Gets the many by I ds.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateIDs">The aggregate I ds.</param>
            <param name="queryOptions">The query options.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootRepository.GetEventsByID(System.Object)">
            <summary>
            Gets the events by ID.
            </summary>
            <param name="aggregateID">The aggregate ID.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootRepository.Save(System.Abstract.EventSourcing.AggregateRoot)">
            <summary>
            Saves the specified aggregate.
            </summary>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootRepository.Save(System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.AggregateRoot})">
            <summary>
            Saves the specified aggregate.
            </summary>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootRepository.MakeSnapshot(System.Abstract.EventSourcing.AggregateRoot,System.Func{System.Abstract.EventSourcing.IAggregateRootRepository,System.Abstract.EventSourcing.AggregateRoot,System.Boolean})">
            <summary>
            Makes the snapshot.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="T:System.Abstract.EventSourcing.AggregateRootRepository">
            <summary>
            AggregateRootRepository
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootRepository.#ctor(System.Abstract.EventSourcing.IEventStore,System.Abstract.EventSourcing.IAggregateRootSnapshotStore)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSourcing.AggregateRootRepository"/> class.
            </summary>
            <param name="eventStore">The event store.</param>
            <param name="snapshotStore">The snapshot store.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootRepository.#ctor(System.Abstract.EventSourcing.IEventStore,System.Abstract.EventSourcing.IAggregateRootSnapshotStore,System.Action{System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSourcing.AggregateRootRepository"/> class.
            </summary>
            <param name="eventStore">The event store.</param>
            <param name="snapshotStore">The snapshot store.</param>
            <param name="eventDispatcher">The event dispatcher.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootRepository.#ctor(System.Abstract.EventSourcing.IEventStore,System.Abstract.EventSourcing.IAggregateRootSnapshotStore,System.Action{System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event}},System.Func{System.Type,System.Abstract.EventSourcing.AggregateRoot})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSourcing.AggregateRootRepository"/> class.
            </summary>
            <param name="eventStore">The event store.</param>
            <param name="snapshotStore">The snapshot store.</param>
            <param name="eventDispatcher">The event dispatcher.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootRepository.GetEventsByID(System.Object)">
            <summary>
            Gets the events by ID.
            </summary>
            <param name="aggregateID">The aggregate ID.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootRepository.GetByID``1(System.Object,System.Abstract.EventSourcing.AggregateRootQueryOptions)">
            <summary>
            Gets the by ID.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateID">The aggregate ID.</param>
            <param name="queryOptions">The query options.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootRepository.GetManyByIDs``1(System.Collections.Generic.IEnumerable{System.Object},System.Abstract.EventSourcing.AggregateRootQueryOptions)">
            <summary>
            Gets the many by I ds.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateIDs">The aggregate I ds.</param>
            <param name="queryOptions">The query options.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootRepository.Save(System.Abstract.EventSourcing.AggregateRoot)">
            <summary>
            Saves the specified aggregate.
            </summary>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootRepository.Save(System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.AggregateRoot})">
            <summary>
            Saves the specified aggregates.
            </summary>
            <param name="aggregates">The aggregates.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootRepository.MakeSnapshot(System.Abstract.EventSourcing.AggregateRoot,System.Func{System.Abstract.EventSourcing.IAggregateRootRepository,System.Abstract.EventSourcing.AggregateRoot,System.Boolean})">
            <summary>
            Makes the snapshot.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="T:System.Abstract.EventSourcing.IBatchedEventStore">
            <summary>
            IBatchedEventStore
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.IEventStore">
            <summary>
            IEventStore
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.IEventStore.GetEventsByID(System.Object,System.Int32)">
            <summary>
            Gets the events by ID.
            </summary>
            <param name="aggregateID">The aggregate ID.</param>
            <param name="startSequence">The start sequence.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.IEventStore.SaveEvents(System.Object,System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event})">
            <summary>
            Saves the events.
            </summary>
            <param name="aggregateID">The aggregate ID.</param>
            <param name="events">The events.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.IBatchedEventStore.GetEventsByIDs(System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.AggregateTuple{System.Int32}})">
            <summary>
            Gets the events by I ds.
            </summary>
            <param name="aggregateIDs">The aggregate I ds.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.IBatchedEventStore.SaveEvents(System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.AggregateTuple{System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event}}})">
            <summary>
            Saves the events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="T:System.Abstract.EventSourcing.Event`1">
            <summary>
            Event
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.Event">
            <summary>
            Event
            </summary>
        </member>
        <member name="T:System.Abstract.IEvent">
            <summary>
            IEvent
            </summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.Event.AggregateID">
            <summary>
            Gets or sets the aggregate ID.
            </summary>
            <value>
            The aggregate ID.
            </value>
        </member>
        <member name="P:System.Abstract.EventSourcing.Event.EventDate">
            <summary>
            Gets or sets the event date.
            </summary>
            <value>
            The event date.
            </value>
        </member>
        <member name="P:System.Abstract.EventSourcing.Event.EventSequence">
            <summary>
            Gets or sets the event sequence.
            </summary>
            <value>
            The event sequence.
            </value>
        </member>
        <member name="P:System.Abstract.EventSourcing.Event`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:System.Abstract.EventSourcing.IAggregateRoot">
            <summary>
            IAggregateRoot
            </summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.IAggregateRoot.AggregateID">
            <summary>
            Gets the aggregate ID.
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.AggregateRoot">
            <summary>
            AggregateRoot
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.IAggregateRootStateAccessor">
            <summary>
            IAggregateRootStateAccessor
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootStateAccessor.LoadFromHistory(System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event})">
            <summary>
            Loads from history.
            </summary>
            <param name="events">The events.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootStateAccessor.GetUncommittedChanges">
            <summary>
            Gets the uncommitted changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootStateAccessor.MarkChangesAsCommitted">
            <summary>
            Marks the changes as committed.
            </summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.AggregateRoot.EmptyEventDispatcher">
            <summary>
            EmptyEventDispatcher
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRoot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSourcing.AggregateRoot"/> class.
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRoot.#ctor(System.Abstract.EventSourcing.AggregateRootOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSourcing.AggregateRoot"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRoot.ApplyEvent(System.Abstract.EventSourcing.Event)">
            <summary>
            Applies the event.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateRoot.AggregateID">
            <summary>
            Gets or sets the aggregate ID.
            </summary>
            <value>
            The aggregate ID.
            </value>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateRoot.LastEventDate">
            <summary>
            Gets the last event date.
            </summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateRoot.LastEventSequence">
            <summary>
            Gets the last event sequence.
            </summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateRoot.EventDispatcher">
            <summary>
            Gets or sets the event dispatcher.
            </summary>
            <value>
            The event dispatcher.
            </value>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateRoot.HasChanged">
            <summary>
            Gets a value indicating whether this instance has changed.
            </summary>
            <value>
            	<c>true</c> if this instance has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Abstract.ServiceRegistrarNamespaceBehaviorWrapper">
            <summary>
            ServiceRegistrarNamespaceBehaviorWrapper
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.IServiceWrapper`1">
            <summary>
            IServiceWrapper
            </summary>
        </member>
        <member name="P:System.Abstract.Parts.IServiceWrapper`1.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="T:System.Abstract.PlatformWebManager">
            <summary>
            PlatformWebManager
            </summary>
        </member>
        <member name="M:System.Abstract.PlatformWebManager.SetProvider(System.Func{System.Abstract.IPlatformWeb})">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.PlatformWebManager.SetProvider(System.Func{System.Abstract.IPlatformWeb},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IPlatformWeb,System.Action{System.Abstract.IPlatformWeb},System.Abstract.PlatformWebManagerDebugger}.ISetupDescriptor)">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.PlatformWebManager.MakeByProvider(System.Func{System.Abstract.IPlatformWeb})">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.PlatformWebManager.MakeByProvider(System.Func{System.Abstract.IPlatformWeb},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IPlatformWeb,System.Action{System.Abstract.IPlatformWeb},System.Abstract.PlatformWebManagerDebugger}.ISetupDescriptor)">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.PlatformWebManager.EnsureRegistration">
            <summary>
            Ensures the registration.
            </summary>
        </member>
        <member name="M:System.Abstract.PlatformWebManager.GetSetupDescriptor(System.Lazy{System.Abstract.IPlatformWeb})">
            <summary>
            Gets the setup descriptor.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="P:System.Abstract.PlatformWebManager.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="T:System.Abstract.IServiceLocator">
            <summary>
            IServiceLocator
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceLocator.GetUnderlyingContainer``1">
            <summary>
            Gets the underlying container.
            </summary>
            <typeparam name="TContainer">The type of the container.</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLocator.CreateChild(System.Object)">
            <summary>
            Creates the child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLocator.Resolve``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLocator.Resolve``1(System.String)">
            <summary>
            Resolves the specified name.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLocator.Resolve(System.Type)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLocator.Resolve(System.Type,System.String)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLocator.ResolveAll``1">
            <summary>
            Resolves all.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLocator.ResolveAll(System.Type)">
            <summary>
            Resolves all.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLocator.Inject``1(``0)">
            <summary>
            Injects the specified instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceLocator.Release(System.Object)">
            <summary>
            Releases the specified instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:System.Abstract.IServiceLocator.TearDown``1(``0)">
            <summary>
            Tears down.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:System.Abstract.IServiceLocator.Registrar">
            <summary>
            Gets the registrar.
            </summary>
        </member>
        <member name="T:System.AbstractExtensions">
            <summary>
            AbstractExtensions
            </summary>
        </member>
        <member name="M:System.AbstractExtensions.ToShortName(System.DeploymentEnvironment)">
            <summary>
            Toes the short name.
            </summary>
            <param name="environment">The environment.</param>
            <returns></returns>
        </member>
        <member name="M:System.AbstractExtensions.IsExternalDeployment(System.DeploymentEnvironment)">
            <summary>
            Determines whether [is external deployment] [the specified environment].
            </summary>
            <param name="environment">The environment.</param>
            <returns>
              <c>true</c> if [is external deployment] [the specified environment]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.AbstractExtensions.ToCode(System.DeploymentEnvironment)">
            <summary>
            Toes the code.
            </summary>
            <param name="environment">The environment.</param>
            <returns></returns>
        </member>
        <member name="M:System.AbstractExtensions.ToCode(System.DevelopmentStage)">
            <summary>
            Toes the code.
            </summary>
            <param name="stage">The stage.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.ServiceBusManager">
            <summary>
            ServiceBusManager
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceBusManager.SetProvider(System.Func{System.Abstract.IServiceBus})">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusManager.SetProvider(System.Func{System.Abstract.IServiceBus},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceBus,System.Action{System.Abstract.IServiceBus},System.Abstract.ServiceBusManagerDebugger}.ISetupDescriptor)">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusManager.MakeByProvider(System.Func{System.Abstract.IServiceBus})">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusManager.MakeByProvider(System.Func{System.Abstract.IServiceBus},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceBus,System.Action{System.Abstract.IServiceBus},System.Abstract.ServiceBusManagerDebugger}.ISetupDescriptor)">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBusManager.EnsureRegistration">
            <summary>
            Ensures the registration.
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceBusManager.GetSetupDescriptor(System.Lazy{System.Abstract.IServiceBus})">
            <summary>
            Gets the setup descriptor.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="P:System.Abstract.ServiceBusManager.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.EventSourcing.FileEventStore">
            <summary>
            FileEventStore
            </summary>
        </member>
        <member name="M:Contoso.Abstract.EventSourcing.FileEventStore.GetEventsByID(System.Object,System.Int32)">
            <summary>
            Gets the events by ID.
            </summary>
            <param name="aggregateID">The aggregate ID.</param>
            <param name="startSequence">The start sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.EventSourcing.FileEventStore.SaveEvents(System.Object,System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event})">
            <summary>
            Saves the events.
            </summary>
            <param name="aggregateID">The aggregate ID.</param>
            <param name="events">The events.</param>
        </member>
        <member name="T:Contoso.Abstract.IStaticServiceCache">
            <remark>
            An static dictionary specific service cache interface
            </remark>
        </member>
        <member name="P:Contoso.Abstract.IStaticServiceCache.Cache">
            <summary>
            Gets the cache.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.StaticServiceCache">
            <summary>
            
            </summary>
            <remark>
            Provides a static dictionary adapter for the service cache sub-system.
              </remark>
              <example>
            ServiceCacheManager.SetProvider(() =&gt; new StaticServiceCache())
              </example>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.StaticServiceCache"/> class.
            </summary>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.Add(System.Object,System.String,System.Abstract.CacheItemPolicy,System.Object,System.Abstract.ServiceCacheByDispatcher)">
            <summary>
            Adds an object into cache based on the parameters provided.
            </summary>
            <param name="tag">Not used</param>
            <param name="name">The key used to identify the item in cache.</param>
            <param name="itemPolicy">Not used</param>
            <param name="value">The value to store in cache.</param>
            <param name="dispatch">Not used</param>
            <returns>Last value that what in cache.</returns>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.Get(System.Object,System.String)">
            <summary>
            Gets the item from cache associated with the key provided.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The key.</param>
            <returns>
            The cached item.
            </returns>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.Get(System.Object,System.String,System.Abstract.IServiceCacheRegistration,System.Abstract.CacheItemHeader@)">
            <summary>
            Gets the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="registration">The registration.</param>
            <param name="header">The header.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.Get(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.Get(System.Object,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the specified registration.
            </summary>
            <param name="tag">The tag.</param>
            <param name="registration">The registration.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.TryGet(System.Object,System.String,System.Object@)">
            <summary>
            Tries the get.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.Set(System.Object,System.String,System.Abstract.CacheItemPolicy,System.Object,System.Abstract.ServiceCacheByDispatcher)">
            <summary>
            Adds an object into cache based on the parameters provided.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The name used to identify the item in cache.</param>
            <param name="itemPolicy">The itemPolicy defining caching policies.</param>
            <param name="value">The value to store in cache.</param>
            <param name="dispatch"></param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.Remove(System.Object,System.String,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Removes from cache the item associated with the key provided.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The key.</param>
            <param name="registration">The registration.</param>
            <returns>
            The item removed from the Cache. If the value in the key parameter is not found, returns null.
            </returns>
        </member>
        <member name="P:Contoso.Abstract.StaticServiceCache.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified name.
            </summary>
        </member>
        <member name="P:Contoso.Abstract.StaticServiceCache.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:Contoso.Abstract.StaticServiceCache.Cache">
            <summary>
            Gets the cache.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.StaticServiceCache.DefaultTouchableCacheItem">
            <summary>
            DefaultTouchableCacheItem
            </summary>
        </member>
        <member name="T:System.Abstract.ITouchableCacheItem">
            <summary>
            ITouchableCacheItem
            </summary>
        </member>
        <member name="M:System.Abstract.ITouchableCacheItem.Touch(System.Object,System.String[])">
            <summary>
            Touches the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
        </member>
        <member name="M:System.Abstract.ITouchableCacheItem.MakeDependency(System.Object,System.String[])">
            <summary>
            Makes the dependency.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.DefaultTouchableCacheItem.#ctor(Contoso.Abstract.StaticServiceCache,System.Abstract.ITouchableCacheItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.StaticServiceCache.DefaultTouchableCacheItem"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="base">The @base.</param>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.DefaultTouchableCacheItem.Touch(System.Object,System.String[])">
            <summary>
            Touches the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.DefaultTouchableCacheItem.MakeDependency(System.Object,System.String[])">
            <summary>
            Makes the dependency.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="T:Contoso.Abstract.StaticServiceCache.DefaultFileTouchableCacheItem">
            <summary>
            DefaultFileTouchableCacheItem
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceCache.FileTouchableCacheItemBase">
            <summary>
            FileTouchableCacheItemBase
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceCache">
            <summary>
            ServiceCache
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceCache.InfiniteAbsoluteExpiration">
            <summary>
            Provides <see cref="T:System.DateTime"/> instance to be used when no absolute expiration value to be set.
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceCache.NoSlidingExpiration">
            <summary>
            Provides <see cref="T:System.TimeSpan"/> instance to be used when no sliding expiration value to be set.
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCache.Touch(System.String[])">
            <summary>
            Touches the specified names.
            </summary>
            <param name="names">The names.</param>
        </member>
        <member name="M:System.Abstract.ServiceCache.Touch(System.Object,System.String[])">
            <summary>
            Touches the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get(System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get``1(System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the specified registration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetMany``1(System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetQuery``1(System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get(System.Abstract.IServiceCacheRegistration,System.Object[])">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="registration">The registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get``1(System.Abstract.IServiceCacheRegistration,System.Object[])">
            <summary>
            Gets the specified registration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetMany``1(System.Abstract.IServiceCacheRegistration,System.Object[])">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetQuery``1(System.Abstract.IServiceCacheRegistration,System.Object[])">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get(System.Abstract.IServiceCacheRegistration,System.Object)">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get``1(System.Abstract.IServiceCacheRegistration,System.Object)">
            <summary>
            Gets the specified registration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetMany``1(System.Abstract.IServiceCacheRegistration,System.Object)">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetQuery``1(System.Abstract.IServiceCacheRegistration,System.Object)">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get(System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get``1(System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the specified registration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetMany``1(System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetQuery``1(System.Abstract.ServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get(System.Type,System.String)">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="anchorType">The type.</param>
            <param name="registrationName">The registration id.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get``1(System.Type,System.String)">
            <summary>
            Gets the specified anchor type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetMany``1(System.Type,System.String)">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetQuery``1(System.Type,System.String)">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get(System.Type,System.String,System.Object[])">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="anchorType">The type.</param>
            <param name="registrationName">The registration id.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get``1(System.Type,System.String,System.Object[])">
            <summary>
            Gets the specified anchor type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetMany``1(System.Type,System.String,System.Object[])">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetQuery``1(System.Type,System.String,System.Object[])">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get(System.Type,System.String,System.Object)">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="anchorType">The type.</param>
            <param name="registrationName">The registration id.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get``1(System.Type,System.String,System.Object)">
            <summary>
            Gets the specified anchor type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetMany``1(System.Type,System.String,System.Object)">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetQuery``1(System.Type,System.String,System.Object)">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="anchorType">The type.</param>
            <param name="registrationName">The registration id.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.Get``1(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Gets the specified anchor type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetMany``1(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.GetQuery``1(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.ServiceCache.Primitives">
            <summary>
            Primitives
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceCache.Primitives.YesNo">
            <summary>
            YesNo
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceCache.Primitives.Gender">
            <summary>
            Gender
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceCache.Primitives.Integer">
            <summary>
            Integer
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceCache.FileTouchableCacheItemBase">
            <summary>
            FileTouchableCacheItemBase
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCache.FileTouchableCacheItemBase.#ctor(System.Abstract.IServiceCache,System.Abstract.ITouchableCacheItem)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceCache.FileTouchableCacheItemBase"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="base">The @base.</param>
        </member>
        <member name="M:System.Abstract.ServiceCache.FileTouchableCacheItemBase.Touch(System.Object,System.String[])">
            <summary>
            Touches the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
        </member>
        <member name="M:System.Abstract.ServiceCache.FileTouchableCacheItemBase.MakeDependency(System.Object,System.String[])">
            <summary>
            Makes the dependency.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.FileTouchableCacheItemBase.MakeDependencyInternal(System.Object,System.String[])">
            <summary>
            Makes the dependency internal.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.FileTouchableCacheItemBase.GetFilePathForName(System.String)">
            <summary>
            Gets the name of the file path for.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCache.FileTouchableCacheItemBase.WriteBodyForName(System.String,System.String)">
            <summary>
            Writes the name of the body for.
            </summary>
            <param name="name">The name.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.Abstract.ServiceCache.FileTouchableCacheItemBase.CanTouch(System.Object,System.String@)">
            <summary>
            Determines whether this instance can touch the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if this instance can touch the specified tag; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:System.Abstract.ServiceCache.FileTouchableCacheItemBase.Directory">
            <summary>
            Gets or sets the directory.
            </summary>
            <value>
            The directory.
            </value>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.DefaultFileTouchableCacheItem.#ctor(Contoso.Abstract.StaticServiceCache,System.Abstract.ITouchableCacheItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.StaticServiceCache.DefaultFileTouchableCacheItem"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="base">The @base.</param>
        </member>
        <member name="M:Contoso.Abstract.StaticServiceCache.DefaultFileTouchableCacheItem.MakeDependencyInternal(System.Object,System.String[])">
            <summary>
            Makes the dependency internal.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="T:Contoso.Abstract.IConsoleServiceLog">
            <summary>
            IConsoleServiceLog
            </summary>
        </member>
        <member name="P:Contoso.Abstract.IConsoleServiceLog.Log">
            <summary>
            Gets the log.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.ConsoleServiceLog">
            <summary>
            ConsoleServiceLog
            </summary>
        </member>
        <member name="M:Contoso.Abstract.ConsoleServiceLog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.ConsoleServiceLog"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Contoso.Abstract.ConsoleServiceLog.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Contoso.Abstract.ConsoleServiceLog.Get(System.String)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.ConsoleServiceLog.Get(System.Type)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.ConsoleServiceLog.Write(System.Abstract.ServiceLog.LogLevel,System.Exception,System.String)">
            <summary>
            Writes the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
        </member>
        <member name="P:Contoso.Abstract.ConsoleServiceLog.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Contoso.Abstract.ConsoleServiceLog.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="T:Contoso.Abstract.IAppServiceBus">
            <remark>
            An application service bus specific service bus interface
            </remark>
        </member>
        <member name="T:System.Abstract.IServiceBus">
            <summary>
            IServiceBus
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceBus.CreateMessage``1(System.Action{``0})">
            <summary>
            Creates the message.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="messageBuilder">The message builder.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceBus.Send(System.Abstract.IServiceBusEndpoint,System.Object[])">
            <summary>
            Sends the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <param name="messages">The messages.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.IServiceBus.Reply(System.Object[])">
            <summary>
            Replies the specified messages.
            </summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:Contoso.Abstract.IAppServiceBus.Add``1">
            <summary>
            Adds this instance.
            </summary>
            <typeparam name="TMessageHandler">The type of the message handler.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.IAppServiceBus.Add(System.Type)">
            <summary>
            Adds the specified message handler type.
            </summary>
            <param name="messageHandlerType">Type of the message handler.</param>
            <returns></returns>
        </member>
        <member name="T:Contoso.Abstract.AppServiceBus">
            <remark>
            An application service bus implementation
            </remark>
            <example>
            <code>
            ServiceBusManager.SetProvider(() => new AppServiceBus()
                    .Add(Handler1)
                    .Add(Handler2))
                .RegisterWithServiceLocator();
            ServiceBusManager.Send&lt;Message1&gt;(x => x.Body = "Message");
            </code>
            </example>
        </member>
        <member name="M:Contoso.Abstract.AppServiceBus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.AppServiceBus"/> class.
            </summary>
        </member>
        <member name="M:Contoso.Abstract.AppServiceBus.#ctor(Contoso.Abstract.IAppServiceMessageHandlerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.AppServiceBus"/> class.
            </summary>
            <param name="messageHandlerFactory">The message handler factory.</param>
        </member>
        <member name="M:Contoso.Abstract.AppServiceBus.#ctor(Contoso.Abstract.IAppServiceMessageHandlerFactory,System.Func{System.Abstract.IServiceLocator})">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.AppServiceBus"/> class.
            </summary>
            <param name="messageHandlerFactory">The message handler factory.</param>
            <param name="locator">The locator.</param>
        </member>
        <member name="M:Contoso.Abstract.AppServiceBus.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            Throws NotImplementedException.
            </returns>
        </member>
        <member name="M:Contoso.Abstract.AppServiceBus.CreateMessage``1(System.Action{``0})">
            <summary>
            Creates a new message.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="messageBuilder">The message builder.</param>
            <returns>The newly created message.</returns>
        </member>
        <member name="M:Contoso.Abstract.AppServiceBus.Add``1">
            <summary>
            Adds a message handler.
            </summary>
            <typeparam name="TMessageHandler">The type of the message handler.</typeparam>
            <returns>Fluent</returns>
        </member>
        <member name="M:Contoso.Abstract.AppServiceBus.Add(System.Type)">
            <summary>
            Adds a message handler
            </summary>
            <param name="messageHandlerType"></param>
            <returns>Fluent</returns>
        </member>
        <member name="M:Contoso.Abstract.AppServiceBus.Send(System.Abstract.IServiceBusEndpoint,System.Object[])">
            <summary>
            Sends a message on the bus
            </summary>
            <param name="destination"></param>
            <param name="messages"></param>
            <returns>Null</returns>
        </member>
        <member name="M:Contoso.Abstract.AppServiceBus.Reply(System.Object[])">
            <summary>
            Replies messages back up the bus.
            </summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:Contoso.Abstract.AppServiceBus.Return``1(``0)">
            <summary>
            Returns a value back up the bus.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="T:System.Abstract.Configuration.EventSourceConfiguration">
            <summary>
            EventSourceConfiguration
            </summary>
        </member>
        <member name="T:System.Abstract.IServiceLocatorInterceptor">
            <summary>
            IServiceLocatorInterceptor
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceLocatorInterceptor.ItemCreated(System.Type,System.Boolean)">
            <summary>
            Items the created.
            </summary>
            <param name="createdItem">The created item.</param>
            <param name="isTransient">if set to <c>true</c> [is transient].</param>
        </member>
        <member name="M:System.Abstract.IServiceLocatorInterceptor.Match(System.Type)">
            <summary>
            Matches the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.ServiceCacheByDispatcher">
            <summary>
            ServiceCacheByDispatcher
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceCacheByDispatcher.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheByDispatcher.#ctor(System.Abstract.IServiceCacheRegistration,System.Object[],System.Abstract.CacheItemHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceCacheByDispatcher"/> struct.
            </summary>
            <param name="registration">The registration.</param>
            <param name="values">The values.</param>
            <param name="header">The header.</param>
        </member>
        <member name="F:System.Abstract.ServiceCacheByDispatcher.Registration">
            <summary>
            Registration
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceCacheByDispatcher.Values">
            <summary>
            Values
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceCacheByDispatcher.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="T:System.Abstract.IPlatformWeb">
            <summary>
            IPlatformWeb
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.PlatformWebExtensions">
            <summary>
            PlatformWebExtensions
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.PlatformWebExtensions.BehaveAs``1(System.Abstract.IPlatformWeb)">
            <summary>
            Behaves as.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.PlatformWeb">
            <summary>
            PlatformWeb
            </summary>
        </member>
        <member name="T:System.IConvertFormatter">
            <summary>
            IConvertFormatter
            </summary>
        </member>
        <member name="M:System.IConvertFormatter.Format(System.Object,System.String,System.Nparams)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:System.IConvertFormatter.Format(System.String,System.String,System.Nparams)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="T:System.StdParams">
            <summary>
            StdParams
            </summary>
        </member>
        <member name="M:System.StdParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.StdParams"/> class.
            </summary>
        </member>
        <member name="M:System.StdParams.#ctor(System.INparams)">
            <summary>
            Initializes a new instance of the <see cref="T:System.StdParams"/> class.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.StdParams.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:System.StdParams"/> class.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.StdParams.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.StdParams"/> class.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.StdParams.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
              
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
              </exception>
        </member>
        <member name="M:System.StdParams.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
        </member>
        <member name="M:System.StdParams.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
              </exception>
        </member>
        <member name="M:System.StdParams.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
        </member>
        <member name="M:System.StdParams.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:System.StdParams.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:System.StdParams.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:System.StdParams.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:System.StdParams.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:System.StdParams.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:System.StdParams.AddRange(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds the range.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.StdParams.ToStringArray">
            <summary>
            Toes the string array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.StdParams.Slice``1(System.String,``0)">
            <summary>
            Slices the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="P:System.StdParams.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
              </returns>
        </member>
        <member name="P:System.StdParams.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
              </returns>
        </member>
        <member name="P:System.StdParams.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
              </returns>
              
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
              
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and <paramref name="key"/> is not found.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
              </exception>
        </member>
        <member name="P:System.StdParams.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:System.StdParams.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:System.Abstract.ServiceRegistration">
            <summary>
            ServiceRegistration
            </summary>
        </member>
        <member name="P:System.Abstract.ServiceRegistration.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceRegistration.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceRegistration.ImplementationType">
            <summary>
            Gets or sets the type of the implementation.
            </summary>
            <value>
            The type of the implementation.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceRegistration.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="T:System.IO.FileEx2">
            <summary>
            FileEx2
            </summary>
        </member>
        <member name="M:System.IO.FileEx2.AppendAllText(System.String,System.String)">
            <summary>
            Appends all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:System.IO.FileEx2.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:System.IO.FileEx2.AppendText(System.String)">
            <summary>
            Appends the text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.Copy(System.String,System.String)">
            <summary>
            Copies the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the dest file.</param>
        </member>
        <member name="M:System.IO.FileEx2.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the dest file.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:System.IO.FileEx2.Create(System.String)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.Create(System.String,System.Int32)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="options">The options.</param>
            <param name="fileSecurity">The file security.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.CreateText(System.String)">
            <summary>
            Creates the text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.Decrypt(System.String)">
            <summary>
            Decrypts the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.FileEx2.Delete(System.String)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.FileEx2.Encrypt(System.String)">
            <summary>
            Encrypts the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.FileEx2.Exists(System.String)">
            <summary>
            Existses the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.GetAccessControl(System.String)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="includeSections">The include sections.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.GetAttributes(System.String)">
            <summary>
            Gets the attributes.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.Move(System.String,System.String)">
            <summary>
            Moves the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the dest file.</param>
        </member>
        <member name="M:System.IO.FileEx2.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <param name="share">The share.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.OpenRead(System.String)">
            <summary>
            Opens the read.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.OpenText(System.String)">
            <summary>
            Opens the text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.OpenWrite(System.String)">
            <summary>
            Opens the write.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.ReadAllBytes(System.String)">
            <summary>
            Reads all bytes.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.ReadAllLines(System.String)">
            <summary>
            Reads all lines.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Reads all lines.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.ReadAllText(System.String)">
            <summary>
            Reads all text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Reads all text.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <param name="destinationBackupFileName">Name of the destination backup file.</param>
        </member>
        <member name="M:System.IO.FileEx2.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <param name="destinationBackupFileName">Name of the destination backup file.</param>
            <param name="ignoreMetadataErrors">if set to <c>true</c> [ignore metadata errors].</param>
        </member>
        <member name="M:System.IO.FileEx2.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <summary>
            Sets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="fileSecurity">The file security.</param>
        </member>
        <member name="M:System.IO.FileEx2.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="path">The path.</param>
            <param name="fileAttributes">The file attributes.</param>
        </member>
        <member name="M:System.IO.FileEx2.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
        </member>
        <member name="M:System.IO.FileEx2.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:System.IO.FileEx2.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:System.IO.FileEx2.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTimeUtc">The last access time UTC.</param>
        </member>
        <member name="M:System.IO.FileEx2.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last write time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:System.IO.FileEx2.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTimeUtc">The last write time UTC.</param>
        </member>
        <member name="M:System.IO.FileEx2.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes all bytes.
            </summary>
            <param name="path">The path.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:System.IO.FileEx2.WriteAllLines(System.String,System.String[])">
            <summary>
            Writes all lines.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:System.IO.FileEx2.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Writes all lines.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:System.IO.FileEx2.WriteAllText(System.String,System.String)">
            <summary>
            Writes all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:System.IO.FileEx2.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:System.IO.FileEx2.Mock">
            <summary>
            Gets or sets the mock.
            </summary>
            <value>
            The mock.
            </value>
        </member>
        <member name="T:System.IO.FileEx2.MockBase">
            <summary>
            MockBase
            </summary>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileEx2.MockBase"/> class.
            </summary>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.AppendAllText(System.String,System.String)">
            <summary>
            Appends all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.AppendText(System.String)">
            <summary>
            Appends the text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Copy(System.String,System.String)">
            <summary>
            Copies the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the dest file.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the dest file.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Create(System.String)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Create(System.String,System.Int32)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="options">The options.</param>
            <param name="fileSecurity">The file security.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.CreateText(System.String)">
            <summary>
            Creates the text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Decrypt(System.String)">
            <summary>
            Decrypts the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Delete(System.String)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Encrypt(System.String)">
            <summary>
            Encrypts the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Exists(System.String)">
            <summary>
            Existses the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.GetAccessControl(System.String)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="includeSections">The include sections.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.GetAttributes(System.String)">
            <summary>
            Gets the attributes.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Move(System.String,System.String)">
            <summary>
            Moves the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the dest file.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <param name="share">The share.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.OpenRead(System.String)">
            <summary>
            Opens the read.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.OpenText(System.String)">
            <summary>
            Opens the text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.OpenWrite(System.String)">
            <summary>
            Opens the write.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.ReadAllBytes(System.String)">
            <summary>
            Reads all bytes.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.ReadAllLines(System.String)">
            <summary>
            Reads all lines.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Reads all lines.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.ReadAllText(System.String)">
            <summary>
            Reads all text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Reads all text.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <param name="destinationBackupFileName">Name of the destination backup file.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <param name="destinationBackupFileName">Name of the destination backup file.</param>
            <param name="ignoreMetadataErrors">if set to <c>true</c> [ignore metadata errors].</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <summary>
            Sets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="fileSecurity">The file security.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="path">The path.</param>
            <param name="fileAttributes">The file attributes.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTimeUtc">The last access time UTC.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last write time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTimeUtc">The last write time UTC.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes all bytes.
            </summary>
            <param name="path">The path.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.WriteAllLines(System.String,System.String[])">
            <summary>
            Writes all lines.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Writes all lines.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.WriteAllText(System.String,System.String)">
            <summary>
            Writes all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:System.IO.FileEx2.MockBase.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="T:System.IO.FileEx2.FileWrapper">
            <summary>
            FileWrapper
            </summary>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.AppendAllText(System.String,System.String)">
            <summary>
            Appends all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.AppendText(System.String)">
            <summary>
            Appends the text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Copy(System.String,System.String)">
            <summary>
            Copies the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the dest file.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the dest file.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Create(System.String)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Create(System.String,System.Int32)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="options">The options.</param>
            <param name="fileSecurity">The file security.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.CreateText(System.String)">
            <summary>
            Creates the text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Decrypt(System.String)">
            <summary>
            Decrypts the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Delete(System.String)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Encrypt(System.String)">
            <summary>
            Encrypts the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Exists(System.String)">
            <summary>
            Existses the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.GetAccessControl(System.String)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="includeSections">The include sections.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.GetAttributes(System.String)">
            <summary>
            Gets the attributes.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Move(System.String,System.String)">
            <summary>
            Moves the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destFileName">Name of the dest file.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <param name="share">The share.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.OpenRead(System.String)">
            <summary>
            Opens the read.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.OpenText(System.String)">
            <summary>
            Opens the text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.OpenWrite(System.String)">
            <summary>
            Opens the write.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.ReadAllBytes(System.String)">
            <summary>
            Reads all bytes.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.ReadAllLines(System.String)">
            <summary>
            Reads all lines.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Reads all lines.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.ReadAllText(System.String)">
            <summary>
            Reads all text.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Reads all text.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <param name="destinationBackupFileName">Name of the destination backup file.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <param name="destinationBackupFileName">Name of the destination backup file.</param>
            <param name="ignoreMetadataErrors">if set to <c>true</c> [ignore metadata errors].</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <summary>
            Sets the access control.
            </summary>
            <param name="path">The path.</param>
            <param name="fileSecurity">The file security.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes.
            </summary>
            <param name="path">The path.</param>
            <param name="fileAttributes">The file attributes.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastAccessTimeUtc">The last access time UTC.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last write time.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last write time UTC.
            </summary>
            <param name="path">The path.</param>
            <param name="lastWriteTimeUtc">The last write time UTC.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes all bytes.
            </summary>
            <param name="path">The path.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.WriteAllLines(System.String,System.String[])">
            <summary>
            Writes all lines.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Writes all lines.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.WriteAllText(System.String,System.String)">
            <summary>
            Writes all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:System.IO.FileEx2.FileWrapper.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes all text.
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="T:System.Abstract.Parts.IBuildManager">
            <summary>
            IBuildManager
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.IBuildManager.CreateCachedFile(System.String)">
            <summary>
            Creates the cached file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.IBuildManager.CreateInstanceFromVirtualPath(System.String,System.Type)">
            <summary>
            Creates the instance from virtual path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <param name="requiredBaseType">Type of the required base.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.IBuildManager.GetReferencedAssemblies">
            <summary>
            Gets the referenced assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.IBuildManager.ReadCachedFile(System.String)">
            <summary>
            Reads the cached file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.Parts.TypeCacheSerializer">
            <summary>
            TypeCacheSerializer
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.ITypeCacheSerializer">
            <summary>
            ITypeCacheSerializer
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ITypeCacheSerializer.DeserializeTypes(System.IO.TextReader)">
            <summary>
            Deserializes the types.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.ITypeCacheSerializer.SerializeTypes(System.Collections.Generic.IEnumerable{System.Type},System.IO.TextWriter)">
            <summary>
            Serializes the types.
            </summary>
            <param name="types">The types.</param>
            <param name="o">The o.</param>
        </member>
        <member name="M:System.Abstract.Parts.TypeCacheSerializer.DeserializeTypes(System.IO.TextReader)">
            <summary>
            Deserializes the types.
            </summary>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.TypeCacheSerializer.SerializeTypes(System.Collections.Generic.IEnumerable{System.Type},System.IO.TextWriter)">
            <summary>
            Serializes the types.
            </summary>
            <param name="types">The types.</param>
            <param name="o">The o.</param>
        </member>
        <member name="T:System.Abstract.EventSourcing.IBatchedAggregateRootSnapshotStore">
            <summary>
            IBatchedAggregateRootSnapshotStore
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.IBatchedAggregateRootSnapshotStore.GetLatestSnapshots``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets the latest snapshots.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateIDs">The aggregate I ds.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.IBatchedAggregateRootSnapshotStore.SaveSnapshots(System.Type,System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.AggregateRootSnapshot})">
            <summary>
            Saves the snapshots.
            </summary>
            <param name="aggregateType">Type of the aggregate.</param>
            <param name="snapshots">The snapshots.</param>
        </member>
        <member name="T:System.Abstract.EventSourcing.RegistryEventDispatcher">
            <summary>
            RegistryEventDispatcher
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.RegistryEventDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSourcing.RegistryEventDispatcher"/> class.
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.RegistryEventDispatcher.#ctor(System.Abstract.EventSourcing.AggregateRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSourcing.RegistryEventDispatcher"/> class.
            </summary>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.RegistryEventDispatcher.RegisterByConvention(System.Abstract.EventSourcing.AggregateRoot)">
            <summary>
            Registers the by convention.
            </summary>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.RegistryEventDispatcher.RegisterHandler``1(System.Action{``0})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.RegistryEventDispatcher.RegisterHandler(System.Type,System.Action{System.Abstract.EventSourcing.Event})">
            <summary>
            Registers the handler.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.RegistryEventDispatcher.GetEventTypes">
            <summary>
            Gets the event types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.RegistryEventDispatcher.ApplyEvent(System.Abstract.EventSourcing.AggregateRoot,System.Abstract.EventSourcing.Event)">
            <summary>
            Applies the event.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <param name="e">The e.</param>
        </member>
        <member name="T:System.Abstract.EventSourcing.IAggregateRootOfflineSnapshotService">
            <summary>
            IAggregateRootOfflineSnapshotService
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.IAggregateRootOfflineSnapshotService.MakeSnapshots(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Makes the snapshots.
            </summary>
            <param name="aggregateTypes">The aggregate types.</param>
        </member>
        <member name="T:System.Abstract.EventSourcing.AggregateRootOfflineSnapshotService">
            <summary>
            AggregateRootOfflineSnapshotService
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootOfflineSnapshotService.#ctor(System.Abstract.EventSourcing.IAggregateRootRepository,System.Abstract.EventSourcing.IOfflineSnaphotQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSourcing.AggregateRootOfflineSnapshotService"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="snaphotQuery">The snaphot query.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootOfflineSnapshotService.MakeSnapshots(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Makes the snapshots.
            </summary>
            <param name="aggregateTypes">The aggregate types.</param>
        </member>
        <member name="T:System.Abstract.CacheEntryUpdateCallback">
            <summary>
            Defines a delegate type for use by <see cref="M:Instinct.CacheCommand.OnCreatedCallback">CacheCommand.OnCreatedCallback</see>.
            Used to provide notification of removal of an item from an instance of a <see cref="T:Instinct.Cache">Cache</see> object.
            </summary>
            <param name="name">The name of the item being removed from cache.</param>
            <param name="value">Value of the item being removed from cache.</param>
        </member>
        <member name="T:System.EnvironmentEx">
            <summary>
            EnvironmentEx
            </summary>
        </member>
        <member name="M:System.EnvironmentEx.NextID">
            <summary>
            Gets the next id in the sequence.
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.EnvironmentEx.OSVersionExMock">
            <summary>
            Gets or sets the OS version ex mock.
            </summary>
            <value>
            The OS version ex mock.
            </value>
        </member>
        <member name="P:System.EnvironmentEx.OSVersionEx">
            <summary>
            Gets the OS version ex.
            </summary>
        </member>
        <member name="P:System.EnvironmentEx.Mock">
            <summary>
            Gets or sets the mock.
            </summary>
            <value>
            The mock.
            </value>
        </member>
        <member name="P:System.EnvironmentEx.ApplicationID">
            <summary>
            Gets the application ID.
            </summary>
        </member>
        <member name="P:System.EnvironmentEx.DeploymentEnvironment">
            <summary>
            Gets or sets the deployment environment.
            </summary>
            <value>
            The deployment environment.
            </value>
        </member>
        <member name="P:System.EnvironmentEx.DevelopmentStage">
            <summary>
            Gets or sets the development stage.
            </summary>
            <value>
            The development stage.
            </value>
        </member>
        <member name="T:System.EnvironmentEx.MockBase">
            <summary>
            MockBase
            </summary>
        </member>
        <member name="M:System.EnvironmentEx.MockBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.EnvironmentEx.MockBase"/> class.
            </summary>
        </member>
        <member name="M:System.EnvironmentEx.MockBase.NextID">
            <summary>
            Nexts the ID.
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.EnvironmentEx.MockBase.DeploymentEnvironment">
            <summary>
            Gets the deployment environment.
            </summary>
        </member>
        <member name="P:System.EnvironmentEx.MockBase.DevelopmentStage">
            <summary>
            Gets the development stage.
            </summary>
        </member>
        <member name="T:System.IO.PathEx2">
            <summary>
            PathEx2
            </summary>
        </member>
        <member name="M:System.IO.PathEx2.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension.
            </summary>
            <param name="path">The path.</param>
            <param name="extension">The extension.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.Combine(System.String,System.String)">
            <summary>
            Combines the specified path1.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetDirectoryName(System.String)">
            <summary>
            Gets the name of the directory.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetExtension(System.String)">
            <summary>
            Gets the extension.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetFileName(System.String)">
            <summary>
            Gets the name of the file.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetFileNameWithoutExtension(System.String)">
            <summary>
            Gets the file name without extension.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetFullPath(System.String)">
            <summary>
            Gets the full path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetInvalidFileNameChars">
            <summary>
            Gets the invalid file name chars.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetInvalidPathChars">
            <summary>
            Gets the invalid path chars.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetPathRoot(System.String)">
            <summary>
            Gets the path root.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetRandomFileName">
            <summary>
            Gets the random name of the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetTempFileName">
            <summary>
            Gets the name of the temp file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.GetTempPath">
            <summary>
            Gets the temp path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.HasExtension(System.String)">
            <summary>
            Determines whether the specified path has extension.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path has extension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.IO.PathEx2.IsPathRooted(System.String)">
            <summary>
            Determines whether [is path rooted] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if [is path rooted] [the specified path]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:System.IO.PathEx2.Mock">
            <summary>
            Gets or sets the mock.
            </summary>
            <value>
            The mock.
            </value>
        </member>
        <member name="T:System.IO.PathEx2.PathWrapper">
            <summary>
            PathWrapper
            </summary>
        </member>
        <member name="T:System.IO.PathEx2.MockBase">
            <summary>
            MockBase
            </summary>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension.
            </summary>
            <param name="path">The path.</param>
            <param name="extension">The extension.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.Combine(System.String,System.String)">
            <summary>
            Combines the specified path1.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetDirectoryName(System.String)">
            <summary>
            Gets the name of the directory.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetExtension(System.String)">
            <summary>
            Gets the extension.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetFileName(System.String)">
            <summary>
            Gets the name of the file.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetFileNameWithoutExtension(System.String)">
            <summary>
            Gets the file name without extension.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetFullPath(System.String)">
            <summary>
            Gets the full path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetInvalidFileNameChars">
            <summary>
            Gets the invalid file name chars.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetInvalidPathChars">
            <summary>
            Gets the invalid path chars.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetPathRoot(System.String)">
            <summary>
            Gets the path root.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetRandomFileName">
            <summary>
            Gets the random name of the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetTempFileName">
            <summary>
            Gets the name of the temp file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.GetTempPath">
            <summary>
            Gets the temp path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.HasExtension(System.String)">
            <summary>
            Determines whether the specified path has extension.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path has extension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.IO.PathEx2.MockBase.IsPathRooted(System.String)">
            <summary>
            Determines whether [is path rooted] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if [is path rooted] [the specified path]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension.
            </summary>
            <param name="path">The path.</param>
            <param name="extension">The extension.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.Combine(System.String,System.String)">
            <summary>
            Combines the specified path1.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetDirectoryName(System.String)">
            <summary>
            Gets the name of the directory.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetExtension(System.String)">
            <summary>
            Gets the extension.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetFileName(System.String)">
            <summary>
            Gets the name of the file.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetFileNameWithoutExtension(System.String)">
            <summary>
            Gets the file name without extension.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetFullPath(System.String)">
            <summary>
            Gets the full path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetInvalidFileNameChars">
            <summary>
            Gets the invalid file name chars.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetInvalidPathChars">
            <summary>
            Gets the invalid path chars.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetPathRoot(System.String)">
            <summary>
            Gets the path root.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetRandomFileName">
            <summary>
            Gets the random name of the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetTempFileName">
            <summary>
            Gets the name of the temp file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.GetTempPath">
            <summary>
            Gets the temp path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.HasExtension(System.String)">
            <summary>
            Determines whether the specified path has extension.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path has extension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.IO.PathEx2.PathWrapper.IsPathRooted(System.String)">
            <summary>
            Determines whether [is path rooted] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if [is path rooted] [the specified path]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:System.Abstract.Configuration.AbstractSection">
            <summary>
            AbstractSection
            </summary>
        </member>
        <member name="T:System.Configuration.ConfigurationSectionEx">
            <summary>
            An abstract class representing a simplified configuration section object. This provides a basic
            facade over the <see cref="T:System.Configuration.ConfigurationSection">ConfigurationSection</see> class.
            </summary>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationSectionEx"/> class.
            </summary>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement"/> object is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Configuration.ConfigurationElement"/> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.Encode``1(``0)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.Encode``1(System.Object,``0)">
            <summary>
            Encodes the specified tag.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.Decode``1(``0)">
            <summary>
            Decodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.Decode``1(System.Object,``0)">
            <summary>
            Decodes the specified tag.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.ApplyConfiguration(System.Configuration.ConfigurationSection)">
            <summary>
            Applies the configuration.
            </summary>
            <param name="inheritConfiguration">The inherit configuration.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.ApplyConfigurationValues(System.Configuration.ConfigurationSection)">
            <summary>
            Applies the configuration values.
            </summary>
            <param name="inheritConfiguration">The inherit configuration.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.ApplyConfigurationElements(System.Configuration.ConfigurationSection)">
            <summary>
            Applies the configuration elements.
            </summary>
            <param name="inheritConfiguration">The inherit configuration.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.ApplyDefaultValues">
            <summary>
            Applies the default values.
            </summary>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.GetAttribute(System.String)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:System.Configuration.ConfigurationSectionEx.Attribute">
            <summary>
            Gets the AttributeIndex of this class.
            </summary>
            <value>
            The attribute.
            </value>
        </member>
        <member name="M:System.Configuration.ConfigurationSectionEx.AttributeIndex.#ctor(System.Configuration.ConfigurationSectionEx)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationSectionEx.AttributeIndex"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:System.Configuration.ConfigurationSectionEx.AttributeIndex.Item(System.Configuration.ConfigurationProperty)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
        </member>
        <member name="P:System.Abstract.Configuration.AbstractSection.EventSource">
            <summary>
            Gets the event source.
            </summary>
        </member>
        <member name="P:System.Abstract.Configuration.AbstractSection.ServiceBus">
            <summary>
            Gets the service bus.
            </summary>
        </member>
        <member name="P:System.Abstract.Configuration.AbstractSection.ServiceCache">
            <summary>
            Gets the service cache.
            </summary>
        </member>
        <member name="P:System.Abstract.Configuration.AbstractSection.ServiceLocator">
            <summary>
            Gets the service locator.
            </summary>
        </member>
        <member name="P:System.Abstract.Configuration.AbstractSection.ServiceLog">
            <summary>
            Gets the service log.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.Parts.WcfTypeSerializer">
            <summary>
            WcfTypeSerializer
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.ITypeSerializer">
            <summary>
            ITypeSerializer
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.ITypeSerializer.ReadObject``1(System.Type,System.IO.Stream)">
            <summary>
            Reads the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.ITypeSerializer.ReadObjects``1(System.Type,System.IO.Stream)">
            <summary>
            Reads the objects.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.ITypeSerializer.WriteObject``1(System.Type,System.IO.Stream,``0)">
            <summary>
            Writes the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:System.Abstract.Parts.ITypeSerializer.WriteObjects``1(System.Type,System.IO.Stream,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the objects.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Contoso.Abstract.Parts.WcfTypeSerializer.ReadObject``1(System.Type,System.IO.Stream)">
            <summary>
            Reads the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.Parts.WcfTypeSerializer.ReadObjects``1(System.Type,System.IO.Stream)">
            <summary>
            Reads the objects.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.Parts.WcfTypeSerializer.WriteObject``1(System.Type,System.IO.Stream,``0)">
            <summary>
            Writes the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Contoso.Abstract.Parts.WcfTypeSerializer.WriteObjects``1(System.Type,System.IO.Stream,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the objects.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <param name="graphs">The graphs.</param>
        </member>
        <member name="T:System.Abstract.CacheItemPolicy">
            <summary>
            Provides an object encapulation of adding/removing items to/from a Cache object instance. Provides a delegate
            for when the item is removed from Cache.
            </summary>
        </member>
        <member name="F:System.Abstract.CacheItemPolicy.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:System.Abstract.CacheItemPolicy.Infinite">
            <summary>
            Infinite
            </summary>
        </member>
        <member name="M:System.Abstract.CacheItemPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.CacheItemPolicy"/> class.
            </summary>
        </member>
        <member name="M:System.Abstract.CacheItemPolicy.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.CacheItemPolicy"/> class.
            </summary>
            <param name="floatingAbsoluteMinuteTimeout">The floating absolute minute timeout.</param>
        </member>
        <member name="P:System.Abstract.CacheItemPolicy.Dependency">
            <summary>
            Gets or sets the object instance that contains dependency information that dictates when an item added to cache should be considered invalid.
            </summary>
            <value>The dependency.</value>
        </member>
        <member name="P:System.Abstract.CacheItemPolicy.AbsoluteExpiration">
            <summary>
            Gets or sets the DateTime instance that represent the absolute expiration of the item being added to cache.
            </summary>
            <value>The absolute expiration.</value>
        </member>
        <member name="P:System.Abstract.CacheItemPolicy.FloatingAbsoluteExpiration">
            <summary>
            Gets or sets the DateTime instance that represent the absolute expiration of the item being added to cache.
            </summary>
            <value>The absolute expiration.</value>
        </member>
        <member name="P:System.Abstract.CacheItemPolicy.SlidingExpiration">
            <summary>
            Gets or sets the TimeSpan instance that indicate the length of time to use for a sliding or dynamice expiration time.
            A sliding expiration is one that is constantly updated, based on the time value provided, whenever the underlying item
            having been cached is retrieved from cache.
            </summary>
            <value>The sliding expiration.</value>
        </member>
        <member name="P:System.Abstract.CacheItemPolicy.Priority">
            <summary>
            Gets or sets the value of the CacheItemPriority enumeration associated with this CacheCommand instance.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:System.Abstract.CacheItemPolicy.UpdateCallback">
            <summary>
            Gets or sets the on CacheItemCreatedCallback instance that is invoked whenever the cached item associated with this 
            instance of CacheCommand has been created for cache.
            </summary>
            <value>The on create callback.</value>
        </member>
        <member name="P:System.Abstract.CacheItemPolicy.RemovedCallback">
            <summary>
            Gets or sets the on CacheItemRemovedCallback instance that is invoked whenever the cached item associated with this 
            instance of CacheCommand has been removed from cache.
            </summary>
            <value>The on remove callback.</value>
        </member>
        <member name="T:System.Abstract.ServiceCacheSettings">
            <summary>
            ServiceCacheSettings
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceCacheSettings"/> class.
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheSettings.#ctor(System.Abstract.ITouchableCacheItem)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceCacheSettings"/> class.
            </summary>
            <param name="touchable">The touchable.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheSettings.TryGetRegion(System.String@,System.String@)">
            <summary>
            Tries to get the region.
            </summary>
        </member>
        <member name="P:System.Abstract.ServiceCacheSettings.RegionMarker">
            <summary>
            Gets or sets the RegionMarker.
            </summary>
        </member>
        <member name="P:System.Abstract.ServiceCacheSettings.Options">
            <summary>
            Gets or sets the options.
            </summary>
        </member>
        <member name="P:System.Abstract.ServiceCacheSettings.RegistrationDispatcher">
            <summary>
            Gets or sets the registration dispatcher.
            </summary>
        </member>
        <member name="P:System.Abstract.ServiceCacheSettings.Touchable">
            <summary>
            Gets or sets the touchable.
            </summary>
        </member>
        <member name="T:System.DateTimeEx2">
            <summary>
            DateTimeEx2
            </summary>
        </member>
        <member name="P:System.DateTimeEx2.NowMock">
            <summary>
            Gets or sets the now mock.
            </summary>
            <value>
            The now mock.
            </value>
        </member>
        <member name="P:System.DateTimeEx2.UtcNowMock">
            <summary>
            Gets or sets the UTC now mock.
            </summary>
            <value>
            The UTC now mock.
            </value>
        </member>
        <member name="P:System.DateTimeEx2.Today">
            <summary>
            Gets the today.
            </summary>
        </member>
        <member name="P:System.DateTimeEx2.Now">
            <summary>
            Gets the now.
            </summary>
        </member>
        <member name="P:System.DateTimeEx2.UtcNow">
            <summary>
            Gets the UTC now.
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.TypeCacheManager">
            <summary>
            TypeCacheManager
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.TypeCacheManager.ReadTypesFromCache(System.Abstract.Parts.IBuildManager,System.String,System.Predicate{System.Type},System.Abstract.Parts.ITypeCacheSerializer)">
            <summary>
            Reads the types from cache.
            </summary>
            <param name="buildManager">The build manager.</param>
            <param name="cacheName">Name of the cache.</param>
            <param name="predicate">The predicate.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.TypeCacheManager.SaveTypesToCache(System.Abstract.Parts.IBuildManager,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Abstract.Parts.ITypeCacheSerializer)">
            <summary>
            Saves the types to cache.
            </summary>
            <param name="buildManager">The build manager.</param>
            <param name="cacheName">Name of the cache.</param>
            <param name="matchingTypes">The matching types.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:System.Abstract.Parts.TypeCacheManager.TypeIsPublicClass(System.Type)">
            <summary>
            Types the is public class.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Contoso.Abstract.IEventLogServiceLog">
            <summary>
            IEventLogServiceLog
            </summary>
        </member>
        <member name="P:Contoso.Abstract.IEventLogServiceLog.Log">
            <summary>
            Gets the log.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.EventLogServiceLog">
            <summary>
            EventLogServiceLog
            </summary>
        </member>
        <member name="M:Contoso.Abstract.EventLogServiceLog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.EventLogServiceLog"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Contoso.Abstract.EventLogServiceLog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.EventLogServiceLog"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Contoso.Abstract.EventLogServiceLog.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.EventLogServiceLog"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="machineName">Name of the machine.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Contoso.Abstract.EventLogServiceLog.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Contoso.Abstract.EventLogServiceLog"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Contoso.Abstract.EventLogServiceLog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Contoso.Abstract.EventLogServiceLog.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Contoso.Abstract.EventLogServiceLog.Get(System.String)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.EventLogServiceLog.Get(System.Type)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.EventLogServiceLog.Write(System.Abstract.ServiceLog.LogLevel,System.Exception,System.String)">
            <summary>
            Writes the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
        </member>
        <member name="P:Contoso.Abstract.EventLogServiceLog.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Contoso.Abstract.EventLogServiceLog.Log">
            <summary>
            Gets the log.
            </summary>
        </member>
        <member name="T:System.Lazy`2">
            <summary>
            Lazy
            </summary>
        </member>
        <member name="T:System.Lazy`1">
            <summary>
            Lazy
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Lazy`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class.
            </summary>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class.
            </summary>
            <param name="isThreadSafe">if set to <c>true</c> [is thread safe].</param>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="isThreadSafe">if set to <c>true</c> [is thread safe].</param>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:System.Lazy`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:System.Lazy`1.IsValueCreated">
            <summary>
            Gets a value indicating whether this instance is value created.
            </summary>
            <value>
            	<c>true</c> if this instance is value created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Lazy`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:System.Lazy`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`2"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`2"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`2"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="isThreadSafe">if set to <c>true</c> [is thread safe].</param>
        </member>
        <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`2"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`2"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="metadata">The metadata.</param>
            <param name="isThreadSafe">if set to <c>true</c> [is thread safe].</param>
        </member>
        <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`2"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="metadata">The metadata.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="P:System.Lazy`2.Metadata">
            <summary>
            Gets the metadata.
            </summary>
        </member>
        <member name="T:System.ICodec`1">
            <summary>
            ICodec
            encoding/decoding interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.ICodec`1.Decode(System.Object,`0)">
            <summary>
            Decodes the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.ICodec`1.Encode(System.Object,`0)">
            <summary>
            Encodes the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.Configuration.ServiceBus.EndpointElement">
            <summary>
            EndpointElement
            </summary>
        </member>
        <member name="P:System.Abstract.Configuration.ServiceBus.EndpointElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:System.Abstract.Configuration.ServiceBus.EndpointElement.Endpoint">
            <summary>
            Gets the endpoint.
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceInjectionMethodAttribute">
            <summary>
            ServiceInjectionMethodAttribute
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLogExtensions">
            <summary>
            ServiceLogExtensions
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Get``1(System.Abstract.IServiceLog)">
            <summary>
            Gets the specified service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Fatal(System.Abstract.IServiceLog,System.String)">
            <summary>
            Fatals the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Fatal(System.Abstract.IServiceLog,System.Exception)">
            <summary>
            Fatals the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.FatalFormat(System.Abstract.IServiceLog,System.String,System.Object[])">
            <summary>
            Fatals the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="s">The s.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.FatalFormat(System.Abstract.IServiceLog,System.Exception,System.String,System.Object[])">
            <summary>
            Fatals the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Error(System.Abstract.IServiceLog,System.String)">
            <summary>
            Errors the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Error(System.Abstract.IServiceLog,System.Exception)">
            <summary>
            Errors the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.ErrorFormat(System.Abstract.IServiceLog,System.String,System.Object[])">
            <summary>
            Errors the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="s">The s.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.ErrorFormat(System.Abstract.IServiceLog,System.Exception,System.String,System.Object[])">
            <summary>
            Errors the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Warning(System.Abstract.IServiceLog,System.String)">
            <summary>
            Warnings the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Warning(System.Abstract.IServiceLog,System.Exception)">
            <summary>
            Warnings the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.WarningFormat(System.Abstract.IServiceLog,System.String,System.Object[])">
            <summary>
            Warnings the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="s">The s.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.WarningFormat(System.Abstract.IServiceLog,System.Exception,System.String,System.Object[])">
            <summary>
            Warnings the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Information(System.Abstract.IServiceLog,System.String)">
            <summary>
            Informations the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Information(System.Abstract.IServiceLog,System.Exception)">
            <summary>
            Informations the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.InformationFormat(System.Abstract.IServiceLog,System.String,System.Object[])">
            <summary>
            Informations the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="s">The s.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.InformationFormat(System.Abstract.IServiceLog,System.Exception,System.String,System.Object[])">
            <summary>
            Informations the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Debug(System.Abstract.IServiceLog,System.String)">
            <summary>
            Debugs the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.Debug(System.Abstract.IServiceLog,System.Exception)">
            <summary>
            Debugs the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.DebugFormat(System.Abstract.IServiceLog,System.String,System.Object[])">
            <summary>
            Debugs the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="s">The s.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.DebugFormat(System.Abstract.IServiceLog,System.Exception,System.String,System.Object[])">
            <summary>
            Debugs the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.BehaveAs``1(System.Abstract.IServiceLog)">
            <summary>
            Behaves as.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLog})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLog},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLog},System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLog},System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLog})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLog},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLog},System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLog},System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLog},System.Abstract.IServiceLocator)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLog},System.Abstract.IServiceLocator,System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLog},System.Abstract.IServiceLocator)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLog},System.Abstract.IServiceLocator,System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Contoso.Abstract.IAppServiceMessageHandlerFactory">
            <summary>
            IAppServiceMessageHandlerFactory
            </summary>
        </member>
        <member name="M:Contoso.Abstract.IAppServiceMessageHandlerFactory.Create``1(System.Type)">
            <summary>
            Creates the specified type.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:System.ParamObject">
            <summary>
            ParamObject
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.ICanAggregateRootSnapshot">
            <summary>
            ICanAggregateRootSnapshot
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.ICanAggregateRootSnapshot.GetSnapshot">
            <summary>
            Gets the snapshot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.ICanAggregateRootSnapshot.LoadSnapshot(System.Abstract.EventSourcing.AggregateRootSnapshot)">
            <summary>
            Loads the snapshot.
            </summary>
            <param name="snapshot">The snapshot.</param>
        </member>
        <member name="T:System.Abstract.CacheItemPriority">
            <summary>
            Enumeration value used in conjunction with the CacheCommand type for identifying a relative priority for an item being cached.
            </summary>
        </member>
        <member name="F:System.Abstract.CacheItemPriority.AboveNormal">
            <summary>
            Cached item has an above normal relative priority value.
            </summary>
        </member>
        <member name="F:System.Abstract.CacheItemPriority.BelowNormal">
            <summary>
            Cached item has an below normal relative priority value.
            </summary>
        </member>
        <member name="F:System.Abstract.CacheItemPriority.Default">
            <summary>
            Cached item has a default priority value.
            </summary>
        </member>
        <member name="F:System.Abstract.CacheItemPriority.High">
            <summary>
            Cached item has a high priority value.
            </summary>
        </member>
        <member name="F:System.Abstract.CacheItemPriority.Low">
            <summary>
            Cached item has a low priority value.
            </summary>
        </member>
        <member name="F:System.Abstract.CacheItemPriority.Normal">
            <summary>
            Cached item has a normal priority value.
            </summary>
        </member>
        <member name="F:System.Abstract.CacheItemPriority.NotRemovable">
            <summary>
            Cached item has a priority value indicating it can not be removed from cache.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.Micro.JsonSerializer`1">
            <summary>
            JsonSerializer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonSerializer`1"/> class.
            </summary>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer`1.CreateSerializer">
            <summary>
            Creates the serializer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer`1.CreateSerializer(Contoso.Abstract.Micro.JsonValueType)">
            <summary>
            Creates the serializer.
            </summary>
            <param name="serializeAs">The serialize as.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonSerializer`1"/> class.
            </summary>
            <param name="createSerializers">if set to <c>true</c> [create serializers].</param>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer`1.Deserialize(System.IO.TextReader)">
            <summary>
            Deserializes the specified r.
            </summary>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer`1.Deserialize(System.IO.TextReader,System.String)">
            <summary>
            Deserializes the specified r.
            </summary>
            <param name="r">The r.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer`1.Serialize(System.IO.TextWriter,`0)">
            <summary>
            Serializes the specified w.
            </summary>
            <param name="w">The w.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer`1.Serialize(System.IO.TextWriter,`0,Contoso.Abstract.Micro.JsonOptions)">
            <summary>
            Serializes the specified w.
            </summary>
            <param name="w">The w.</param>
            <param name="obj">The obj.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer`1.Serialize(System.IO.TextWriter,`0,Contoso.Abstract.Micro.JsonOptions,System.String)">
            <summary>
            Serializes the specified w.
            </summary>
            <param name="w">The w.</param>
            <param name="obj">The obj.</param>
            <param name="options">The options.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonSerializer`1.Serialize(System.IO.TextWriter,`0,Contoso.Abstract.Micro.JsonOptions,System.String,System.Int32)">
            <summary>
            Serializes the specified w.
            </summary>
            <param name="w">The w.</param>
            <param name="obj">The obj.</param>
            <param name="options">The options.</param>
            <param name="format">The format.</param>
            <param name="tabDepth">The tab depth.</param>
        </member>
        <member name="T:System.Abstract.ServiceLogEventType">
            <summary>
            Category of events for classifying logging actions.
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLogEventType.Trace">
            <summary>
            Generic logging action indicating tracking information.
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLogEventType.Debug">
            <summary>
            Logging action involving application debugging information.
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLogEventType.Information">
            <summary>
            Logging action involving non-specific information of general purpose.
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLogEventType.Warning">
            <summary>
            Logging action involving information of concern.
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLogEventType.Error">
            <summary>
            Logging action involving information regarding a system or application error of a non-critical nature.
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLogEventType.Fatal">
            <summary>
            Logging action involving information regarding a critical system or application error.
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLog">
            <summary>
            ServiceLog
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLog.LogLevel">
            <summary>
            LogLevel
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLog.LogLevel.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLog.LogLevel.Fatal">
            <summary>
            Fatal
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLog.LogLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLog.LogLevel.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLog.LogLevel.Information">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLog.LogLevel.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceBusManagerDebugger">
            <summary>
            ServiceBusManagerDebugger
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceBusManagerDebugger.DebugStarted">
            <summary>
            Debugs the started.
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceBusManagerDebugger.DebuggerFlags">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceDependencyAttribute">
            <summary>
            ServiceDependencyAttribute
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceDependencyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceDependencyAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceDependencyAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.ServiceDependencyAttribute.GetServiceDependencies(System.Reflection.ParameterInfo)">
            <summary>
            Gets the service dependencies.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceDependencyAttribute.GetServiceDependencies(System.Reflection.PropertyInfo)">
            <summary>
            Gets the service dependencies.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="P:System.Abstract.ServiceDependencyAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:System.DevelopmentStage">
            <summary>
            DevelopmentStage
            </summary>
        </member>
        <member name="F:System.DevelopmentStage.PreAlpha">
            <summary>
            PreAlpha
            </summary>
        </member>
        <member name="F:System.DevelopmentStage.Alpha">
            <summary>
            Alpha
            </summary>
        </member>
        <member name="F:System.DevelopmentStage.Beta">
            <summary>
            Beta
            </summary>
        </member>
        <member name="F:System.DevelopmentStage.Release">
            <summary>
            Release
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLocator">
            <summary>
            ServiceLocator
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceLocator.Resolve``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocator.ResolveAll``1">
            <summary>
            Resolves all.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="T:System.PlatformSuites">
            <summary>
            PlatformSuites
            </summary>
        </member>
        <member name="F:System.PlatformSuites.BackOffice">
            <summary>
            BackOffice
            </summary>
        </member>
        <member name="F:System.PlatformSuites.Blade">
            <summary>
            Blade
            </summary>
        </member>
        <member name="F:System.PlatformSuites.ComputeServer">
            <summary>
            ComputeServer
            </summary>
        </member>
        <member name="F:System.PlatformSuites.DataCenter">
            <summary>
            DataCenter
            </summary>
        </member>
        <member name="F:System.PlatformSuites.Enterprise">
            <summary>
            Enterprise
            </summary>
        </member>
        <member name="F:System.PlatformSuites.EmbeddedNT">
            <summary>
            EmbeddedNT
            </summary>
        </member>
        <member name="F:System.PlatformSuites.Personal">
            <summary>
            Personal
            </summary>
        </member>
        <member name="F:System.PlatformSuites.SingleUserTS">
            <summary>
            SingleUserTS
            </summary>
        </member>
        <member name="F:System.PlatformSuites.SmallBusiness">
            <summary>
            SmallBusiness
            </summary>
        </member>
        <member name="F:System.PlatformSuites.SmallBusinessRestricted">
            <summary>
            SmallBusinessRestricted
            </summary>
        </member>
        <member name="F:System.PlatformSuites.StorageServer">
            <summary>
            StorageServer
            </summary>
        </member>
        <member name="F:System.PlatformSuites.Terminal">
            <summary>
            Terminal
            </summary>
        </member>
        <member name="F:System.PlatformSuites.WHServer">
            <summary>
            WHServer
            </summary>
        </member>
        <member name="T:Contoso.Abstract.IAppServiceMessageHandler`1">
            <summary>
            An application service bus message handler interface
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="T:System.Configuration.ConfigurationElementCollectionEx`1">
            <summary>
            An abstract class representing a simplified configuration setting object collection. This provides a basic
            facade over the <see cref="T:System.Configuration.ConfigurationElementCollection">ConfigurationElement</see> class.
            </summary>
            <typeparam name="T">Specific type contained within the generic hash instance.</typeparam>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationElementCollectionEx`1"/> class.
            </summary>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.#ctor(System.Configuration.ConfigurationElementCollectionType)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationElementCollectionEx`1"/> class.
            </summary>
            <param name="collectionType">Type of the collection.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.AddIfUndefined(System.String)">
            <summary>
            Adds if undefined.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.AddIfUndefined(System.String,System.Boolean@)">
            <summary>
            Adds if undefined.
            </summary>
            <param name="name">The name.</param>
            <param name="wasAdded">if set to <c>true</c> [is new].</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElementCollection"/> object is read only.
            </summary>
            <returns>
            true if the <see cref="T:System.Configuration.ConfigurationElementCollection"/> object is read only; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.TryGetValue(System.Object,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>
              <c>true</c> if the Collection contains an element with the specified key; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.ApplyConfiguration(System.Configuration.ConfigurationElementCollection)">
            <summary>
            Applies the configuration.
            </summary>
            <param name="inheritConfiguration">The inherit configuration.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.ApplyConfigurationValues(System.Configuration.ConfigurationElementCollection)">
            <summary>
            Applies the configuration values.
            </summary>
            <param name="inheritConfiguration">The inherit configuration.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.ApplyConfigurationElements(System.Configuration.ConfigurationElementCollection)">
            <summary>
            Applies the configuration elements.
            </summary>
            <param name="inheritConfiguration">The inherit configuration.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.ApplyDefaultValues">
            <summary>
            Applies the default values.
            </summary>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a configuration element to the <see cref="T:System.Configuration.ConfigurationElementCollection">ConfigurationElementCollection</see>.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to add.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement">ConfigurationElement</see>
            of the generic parameter type T.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the Name for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.GetBaseItem(System.String)">
            <summary>
            Gets the item associated with the key provided from the underlying base config collection.
            </summary>
            <param name="key">The key.</param>
            <returns>
            Configuration value.
            </returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.SetBaseItem(System.String,System.Object)">
            <summary>
            Sets the item associated with the key provided from the underlying base config collection.
            </summary>
            <param name="key">The key to use.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.GetAttribute(System.String)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx`1.Item(System.Int32)">
            <summary>
            Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <returns>The specified property, attribute, or child element</returns>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx`1.Item(System.String)">
            <summary>
            Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <returns>The specified property, attribute, or child element</returns>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx`1.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection">ConfigurationElementCollection</see>
            returned by accessing <see cref="P:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap">AddRemoveClearMap</see>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"></see> of this collection.</returns>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx`1.Attribute">
            <summary>
            Gets the AttributeIndex of this class.
            </summary>
            <value>
            The attribute.
            </value>
        </member>
        <member name="M:System.Configuration.ConfigurationElementCollectionEx`1.AttributeIndex.#ctor(System.Configuration.ConfigurationElementCollectionEx{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationElementCollectionEx`1.AttributeIndex"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx`1.AttributeIndex.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:System.Collections.IIndexer`3">
            <summary>
            Provides a standardized, abstract, generic base class for indexed object types. Provides no implementation details by itself.
            </summary>
            <typeparam name="TKey">Generic type of the key for the indexed object instance.</typeparam>
            <typeparam name="TKey2">The type of the key2.</typeparam>
            <typeparam name="TValue">Generic type for the value in the indexed object instance.</typeparam>
        </member>
        <member name="P:System.Collections.IIndexer`3.Item(`0,`1)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <value>The value associated with the specified key.</value>
        </member>
        <member name="T:System.Abstract.Parts.PartsExtensions">
            <summary>
            PartsExtensions
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.PartsExtensions.ReadObject``1(System.Abstract.Parts.ITypeSerializer,System.Type,System.String)">
            <summary>
            Reads the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">The serializer.</param>
            <param name="type">The type.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.PartsExtensions.ReadObject``1(System.Abstract.Parts.ITypeSerializer,System.Type,System.String,System.Text.Encoding)">
            <summary>
            Reads the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">The serializer.</param>
            <param name="type">The type.</param>
            <param name="text">The text.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.PartsExtensions.ReadObjectBase64``1(System.Abstract.Parts.ITypeSerializer,System.Type,System.String)">
            <summary>
            Reads the object base64.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">The serializer.</param>
            <param name="type">The type.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.PartsExtensions.WriteObject``1(System.Abstract.Parts.ITypeSerializer,System.Type,``0)">
            <summary>
            Writes the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">The serializer.</param>
            <param name="type">The type.</param>
            <param name="graph">The graph.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.PartsExtensions.WriteObject``1(System.Abstract.Parts.ITypeSerializer,System.Type,``0,System.Text.Encoding)">
            <summary>
            Writes the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">The serializer.</param>
            <param name="type">The type.</param>
            <param name="graph">The graph.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.PartsExtensions.WriteObjectBase64``1(System.Abstract.Parts.ITypeSerializer,System.Type,``0)">
            <summary>
            Writes the object base64.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">The serializer.</param>
            <param name="type">The type.</param>
            <param name="graph">The graph.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.IServiceRegistrant">
            <summary>
            IServiceRegistrant
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceRegistrant.Register(System.Abstract.IServiceRegistrar)">
            <summary>
            Registers the specified registrar.
            </summary>
            <param name="registrar">The registrar.</param>
        </member>
        <member name="T:System.Abstract.ServiceLocatorExtensions">
            <summary>
            ServiceLocatorExtensions
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.GetServiceLocator``1(System.Abstract.IServiceLocator)">
            <summary>
            Gets the service locator.
            </summary>
            <typeparam name="TServiceLocator">The type of the service locator.</typeparam>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.Resolve``1(System.Abstract.IServiceLocator,System.Type)">
            <summary>
            Resolves the specified locator.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="locator">The locator.</param>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.Resolve``1(System.Abstract.IServiceLocator,System.Type,System.String)">
            <summary>
            Resolves the specified locator.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="locator">The locator.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.ResolveAll``1(System.Abstract.IServiceLocator,System.Type)">
            <summary>
            Resolves all.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="locator">The locator.</param>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.BehaveAs``1(System.Abstract.IServiceLocator)">
            <summary>
            Behaves as.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.BehaveAs(System.Abstract.IServiceLocator,System.String)">
            <summary>
            Behaves as.
            </summary>
            <param name="locator">The locator.</param>
            <param name="namespace">The @namespace.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.BehaveAs(System.Abstract.IServiceRegistrar,System.Abstract.ServiceRegistrarLifetime)">
            <summary>
            Behaves as.
            </summary>
            <param name="registrar">The registrar.</param>
            <param name="lifetime">The lifetime.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.Register(System.Lazy{System.Abstract.IServiceLocator},System.Action{System.Abstract.IServiceRegistrar})">
            <summary>
            Registers the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="registrant">The registrant.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLocator},System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLocator},System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLocator},System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLocator},System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLocator},System.Abstract.IServiceLocator)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceLocator},System.Abstract.IServiceLocator,System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLocator},System.Abstract.IServiceLocator)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceLocator},System.Abstract.IServiceLocator,System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByIServiceRegistration(System.Lazy{System.Abstract.IServiceLocator},System.Reflection.Assembly[])">
            <summary>
            Registers the by I service registration.
            </summary>
            <param name="service">The service.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByIServiceRegistration(System.Lazy{System.Abstract.IServiceLocator},System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Registers the by I service registration.
            </summary>
            <param name="service">The service.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByNamingConvention(System.Lazy{System.Abstract.IServiceLocator},System.Reflection.Assembly[])">
            <summary>
            Registers the by naming convention.
            </summary>
            <param name="service">The service.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByNamingConvention(System.Lazy{System.Abstract.IServiceLocator},System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Registers the by naming convention.
            </summary>
            <param name="service">The service.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByTypeMatch``1(System.Lazy{System.Abstract.IServiceLocator},System.Reflection.Assembly[])">
            <summary>
            Registers the by type match.
            </summary>
            <typeparam name="TBasedOn">The type of the based on.</typeparam>
            <param name="service">The service.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByTypeMatch``1(System.Lazy{System.Abstract.IServiceLocator},System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Registers the by type match.
            </summary>
            <typeparam name="TBasedOn">The type of the based on.</typeparam>
            <param name="service">The service.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByTypeMatch(System.Lazy{System.Abstract.IServiceLocator},System.Type,System.Reflection.Assembly[])">
            <summary>
            Registers the by type match.
            </summary>
            <param name="service">The service.</param>
            <param name="basedOnType">Type of the based on.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByTypeMatch(System.Lazy{System.Abstract.IServiceLocator},System.Type,System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Registers the by type match.
            </summary>
            <param name="service">The service.</param>
            <param name="basedOnType">Type of the based on.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByIServiceRegistration(System.Abstract.IServiceRegistrar,System.Reflection.Assembly[])">
            <summary>
            Registers the by I service registration.
            </summary>
            <param name="registrar">The registrar.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByIServiceRegistration(System.Abstract.IServiceRegistrar,System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Registers the by I service registration.
            </summary>
            <param name="registrar">The registrar.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByNamingConvention(System.Abstract.IServiceRegistrar,System.Reflection.Assembly[])">
            <summary>
            Registers the by naming convention.
            </summary>
            <param name="registrar">The registrar.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByNamingConvention(System.Abstract.IServiceRegistrar,System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Registers the by naming convention.
            </summary>
            <param name="registrar">The registrar.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByNamingConvention(System.Action{System.Type,System.Type},System.Predicate{System.Type},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Registers the by naming convention.
            </summary>
            <param name="action">The action.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByTypeMatch``1(System.Abstract.IServiceRegistrar,System.Reflection.Assembly[])">
            <summary>
            Registers the by type match.
            </summary>
            <typeparam name="TBasedOn">The type of the based on.</typeparam>
            <param name="registrar">The registrar.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByTypeMatch``1(System.Abstract.IServiceRegistrar,System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Registers the by type match.
            </summary>
            <typeparam name="TBasedOn">The type of the based on.</typeparam>
            <param name="registrar">The registrar.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByTypeMatch(System.Abstract.IServiceRegistrar,System.Type,System.Reflection.Assembly[])">
            <summary>
            Registers the by type match.
            </summary>
            <param name="registrar">The registrar.</param>
            <param name="basedOnType">Type of the based on.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByTypeMatch(System.Abstract.IServiceRegistrar,System.Type,System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Registers the by type match.
            </summary>
            <param name="registrar">The registrar.</param>
            <param name="basedOnType">Type of the based on.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorExtensions.RegisterByTypeMatch(System.Action{System.Type,System.Type,System.String},System.Type,System.Predicate{System.Type},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Registers the by type match.
            </summary>
            <param name="action">The action.</param>
            <param name="basedOnType">Type of the based on.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="F:System.Abstract.ServiceLocatorExtensions.DefaultPredicate">
            <summary>
            DefaultPredicate
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLocatorManagerDebugger">
            <summary>
            ServiceLocatorManagerDebugger
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceLocatorManagerDebugger.DebugStarted">
            <summary>
            Debugs the started.
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLocatorManagerDebugger.DebuggerFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLocatorManagerDebugger.DebuggerFlags.ByIServiceRegistration">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLocatorManagerDebugger.DebuggerFlags.ByNamingConvention">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLocatorManagerDebugger.DebuggerFlags.ByTypeMatch">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Abstract.CacheItemBuilder">
            <summary>
            CacheItemBuilder
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceCacheForeignRegistration">
            <summary>
            ServiceCacheForeignRegistration
            </summary>
        </member>
        <member name="T:System.Abstract.IServiceCacheRegistration">
            <summary>
            IServiceCacheRegistration
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceCacheRegistration.AttachRegistrar(System.Abstract.ServiceCacheRegistrar,System.String)">
            <summary>
            Attaches the registrar.
            </summary>
            <param name="registrar">The registrar.</param>
            <param name="absoluteName">Name of the absolute.</param>
        </member>
        <member name="P:System.Abstract.IServiceCacheRegistration.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:System.Abstract.IServiceCacheRegistration.AbsoluteName">
            <summary>
            Gets the name of the absolute.
            </summary>
            <value>
            The name of the absolute.
            </value>
        </member>
        <member name="P:System.Abstract.IServiceCacheRegistration.UseHeaders">
            <summary>
            Gets the use headers.
            </summary>
            <value>
            The use headers.
            </value>
        </member>
        <member name="P:System.Abstract.IServiceCacheRegistration.Registrar">
            <summary>
            Gets the registrar.
            </summary>
            <value>
            The registrar.
            </value>
        </member>
        <member name="M:System.Abstract.ServiceCacheForeignRegistration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceCacheForeignRegistration"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheForeignRegistration.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceCacheForeignRegistration"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="foreignType">Type of the foreign.</param>
            <param name="foreignName">Name of the foreign.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheForeignRegistration.AttachRegistrar(System.Abstract.ServiceCacheRegistrar,System.String)">
            <summary>
            Attaches the registrar.
            </summary>
            <param name="registrar">The registrar.</param>
            <param name="absoluteName">Name of the absolute.</param>
        </member>
        <member name="P:System.Abstract.ServiceCacheForeignRegistration.AbsoluteName">
            <summary>
            Gets the name of the absolute.
            </summary>
            <value>
            The name of the absolute.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheForeignRegistration.UseHeaders">
            <summary>
            Gets the use headers.
            </summary>
            <value>
            The use headers.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheForeignRegistration.Registrar">
            <summary>
            Gets the registrar.
            </summary>
            <value>
            The registrar.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheForeignRegistration.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheForeignRegistration.ForeignType">
            <summary>
            Gets or sets the foreign type.
            </summary>
            <value>
            The type of the foreign.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheForeignRegistration.ForeignName">
            <summary>
            Gets or sets the name of the foreign.
            </summary>
            <value>
            The name of the foreign.
            </value>
        </member>
        <member name="T:System.Abstract.ServiceCacheNamespaceBehaviorWrapper">
            <summary>
            ServiceCacheNamespaceBehaviorWrapper
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceCacheExtensions">
            <summary>
            ServiceCacheExtensions
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Add(System.Abstract.IServiceCache,System.String,System.Object)">
            <summary>
            Adds the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Add(System.Abstract.IServiceCache,System.String,System.Abstract.CacheItemPolicy,System.Object)">
            <summary>
            Adds the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="name">The name.</param>
            <param name="itemPolicy">The item policy.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Add(System.Abstract.IServiceCache,System.Object,System.String,System.Object)">
            <summary>
            Adds the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Add(System.Abstract.IServiceCache,System.Object,System.String,System.Abstract.CacheItemPolicy,System.Object)">
            <summary>
            Adds the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="itemPolicy">The item policy.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get(System.Abstract.IServiceCache,System.String)">
            <summary>
            Gets the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get(System.Abstract.IServiceCache,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.TryGet(System.Abstract.IServiceCache,System.String,System.Object@)">
            <summary>
            Tries the get.
            </summary>
            <param name="service">The cache.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Remove(System.Abstract.IServiceCache,System.String)">
            <summary>
            Removes the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Remove(System.Abstract.IServiceCache,System.Object,System.String)">
            <summary>
            Removes the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Set(System.Abstract.IServiceCache,System.String,System.Object)">
            <summary>
            Sets the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Set(System.Abstract.IServiceCache,System.String,System.Abstract.CacheItemPolicy,System.Object)">
            <summary>
            Sets the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="name">The name.</param>
            <param name="itemPolicy">The item policy.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Set(System.Abstract.IServiceCache,System.Object,System.String,System.Object)">
            <summary>
            Sets the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Set(System.Abstract.IServiceCache,System.Object,System.String,System.Abstract.CacheItemPolicy,System.Object)">
            <summary>
            Sets the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="itemPolicy">The item policy.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.EnsureCacheDependency(System.Abstract.IServiceCache,System.Object,System.Abstract.CacheItemDependency)">
            <summary>
            Ensures the cache dependency.
            </summary>
            <param name="service">The cache.</param>
            <param name="tag">The tag.</param>
            <param name="dependency">The dependency.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.EnsureCacheDependency(System.Abstract.IServiceCache,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensures the cache dependency.
            </summary>
            <param name="service">The cache.</param>
            <param name="names">The names.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Touch(System.Abstract.IServiceCache,System.String[])">
            <summary>
            Touches the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="names">The names.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Touch(System.Abstract.IServiceCache,System.Object,System.String[])">
            <summary>
            Touches the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.MakeDependency(System.Abstract.IServiceCache,System.String[])">
            <summary>
            Makes the dependency.
            </summary>
            <param name="service">The cache.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.BehaveAs``1(System.Abstract.IServiceCache)">
            <summary>
            Behaves as.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.BehaveAs(System.Abstract.IServiceCache,System.String)">
            <summary>
            Behaves as.
            </summary>
            <param name="service">The cache.</param>
            <param name="namespace">The @namespace.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.BehaveAs(System.Abstract.IServiceCache,System.Collections.Generic.IEnumerable{System.Object},System.String@)">
            <summary>
            Behaves as.
            </summary>
            <param name="service">The cache.</param>
            <param name="values">The values.</param>
            <param name="namespace">The @namespace.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the specified cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``2(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetQuery``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[])">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[])">
            <summary>
            Gets the specified cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[])">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``2(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[])">
            <summary>
            Gets the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetQuery``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[])">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object)">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object)">
            <summary>
            Gets the specified cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object)">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``2(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object)">
            <summary>
            Gets the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetQuery``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object)">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``2(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetQuery``1(System.Abstract.IServiceCache,System.Abstract.ServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the specified cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Send(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object[])">
            <summary>
            Sends the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="registration">The registration.</param>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Send(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Sends the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="messages">The messages.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get(System.Abstract.IServiceCache,System.Type,System.String)">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="cache">The cache.</param>
            <param name="anchorType">The type.</param>
            <param name="registrationName">The registration id.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get``1(System.Abstract.IServiceCache,System.Type,System.String)">
            <summary>
            Gets the specified cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``1(System.Abstract.IServiceCache,System.Type,System.String)">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``2(System.Abstract.IServiceCache,System.Type,System.String)">
            <summary>
            Gets the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetQuery``1(System.Abstract.IServiceCache,System.Type,System.String)">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get(System.Abstract.IServiceCache,System.Type,System.String,System.Object[])">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="cache">The cache.</param>
            <param name="anchorType">The type.</param>
            <param name="registrationName">The registration id.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get``1(System.Abstract.IServiceCache,System.Type,System.String,System.Object[])">
            <summary>
            Gets the specified cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``1(System.Abstract.IServiceCache,System.Type,System.String,System.Object[])">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``2(System.Abstract.IServiceCache,System.Type,System.String,System.Object[])">
            <summary>
            Gets the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetQuery``1(System.Abstract.IServiceCache,System.Type,System.String,System.Object[])">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get(System.Abstract.IServiceCache,System.Type,System.String,System.Object)">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="cache">The cache.</param>
            <param name="anchorType">The type.</param>
            <param name="registrationName">The registration id.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get``1(System.Abstract.IServiceCache,System.Type,System.String,System.Object)">
            <summary>
            Gets the specified cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``1(System.Abstract.IServiceCache,System.Type,System.String,System.Object)">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``2(System.Abstract.IServiceCache,System.Type,System.String,System.Object)">
            <summary>
            Gets the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetQuery``1(System.Abstract.IServiceCache,System.Type,System.String,System.Object)">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get(System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Gets the specified cached item.
            </summary>
            <param name="cache">The cache.</param>
            <param name="anchorType">The type.</param>
            <param name="registrationName">The registration id.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``1(System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Gets the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetMany``2(System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Gets the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.GetQuery``1(System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Get``1(System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Gets the specified cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Send(System.Abstract.IServiceCache,System.Type,System.String,System.Object[])">
            <summary>
            Sends the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Send(System.Abstract.IServiceCache,System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Sends the specified cache.
            </summary>
            <param name="service">The service.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="tag">The tag.</param>
            <param name="messages">The messages.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.SendAll``1(System.Abstract.IServiceCache,System.Object[])">
            <summary>
            Sends the specified service.
            </summary>
            <typeparam name="TAnchor">The type of the anchor.</typeparam>
            <param name="service">The service.</param>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.SendAll``1(System.Abstract.IServiceCache,System.Object,System.Object[])">
            <summary>
            Sends the specified cache.
            </summary>
            <typeparam name="TAnchor">The type of the anchor.</typeparam>
            <param name="service">The cache.</param>
            <param name="tag">The tag.</param>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.SendAll(System.Abstract.IServiceCache,System.Type,System.Object[])">
            <summary>
            Sends the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.SendAll(System.Abstract.IServiceCache,System.Type,System.Object,System.Object[])">
            <summary>
            Sends the specified cache.
            </summary>
            <param name="service">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="tag">The tag.</param>
            <param name="messages">The messages.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RemoveAll(System.Abstract.IServiceCache,System.Type)">
            <summary>
            Removes all.
            </summary>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Remove(System.Abstract.IServiceCache,System.Abstract.ServiceCacheRegistration)">
            <summary>
            Removes the specified cache.
            </summary>
            <param name="cache">The cache.</param>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.Remove(System.Abstract.IServiceCache,System.Type,System.String)">
            <summary>
            Removes the specified cache.
            </summary>
            <param name="cache">The cache.</param>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceCache})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceCache},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceCache},System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceCache},System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceCache})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceCache},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceCache},System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceCache},System.Lazy{System.Abstract.IServiceLocator},System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceCache},System.Abstract.IServiceLocator)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator``1(System.Lazy{System.Abstract.IServiceCache},System.Abstract.IServiceLocator,System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceCache},System.Abstract.IServiceLocator)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheExtensions.RegisterWithServiceLocator(System.Lazy{System.Abstract.IServiceCache},System.Abstract.IServiceLocator,System.String)">
            <summary>
            Registers the with service locator.
            </summary>
            <param name="service">The service.</param>
            <param name="locator">The locator.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.ServiceCacheManagerDebugger">
            <summary>
            ServiceCacheManagerDebugger
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheManagerDebugger.DebugStarted">
            <summary>
            Debugs the started.
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceCacheManagerDebugger.DebuggerFlags">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourcing.AggregateTuple`1">
            <summary>
            AggregateTuple
            </summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateTuple`1.AggregateID">
            <summary>
            Gets or sets the aggregate ID.
            </summary>
            <value>
            The aggregate ID.
            </value>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateTuple`1.Item1">
            <summary>
            Gets or sets the item1.
            </summary>
            <value>
            The item1.
            </value>
        </member>
        <member name="T:System.Abstract.EventSourcing.AggregateTuple`2">
            <summary>
            AggregateTuple
            </summary>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateTuple`2.AggregateID">
            <summary>
            Gets or sets the aggregate ID.
            </summary>
            <value>
            The aggregate ID.
            </value>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateTuple`2.Item1">
            <summary>
            Gets or sets the item1.
            </summary>
            <value>
            The item1.
            </value>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateTuple`2.Item2">
            <summary>
            Gets or sets the item2.
            </summary>
            <value>
            The item2.
            </value>
        </member>
        <member name="T:Contoso.Abstract.EventSourcing.FileAggregateRootSnapshotStore">
            <summary>
            FileAggregateRootSnapshotStore
            </summary>
        </member>
        <member name="M:Contoso.Abstract.EventSourcing.FileAggregateRootSnapshotStore.GetLatestSnapshot``1(System.Object)">
            <summary>
            Gets the latest snapshot.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateID">The aggregate ID.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.EventSourcing.FileAggregateRootSnapshotStore.SaveSnapshot(System.Type,System.Abstract.EventSourcing.AggregateRootSnapshot)">
            <summary>
            Saves the snapshot.
            </summary>
            <param name="aggregateType">Type of the aggregate.</param>
            <param name="snapshot">The snapshot.</param>
        </member>
        <member name="P:Contoso.Abstract.EventSourcing.FileAggregateRootSnapshotStore.InlineSnapshotPredicate">
            <summary>
            Gets the inline snapshot predicate.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.Parts.MicroJsonTypeSerializer">
            <summary>
            MicroJsonTypeSerializer
            </summary>
        </member>
        <member name="M:Contoso.Abstract.Parts.MicroJsonTypeSerializer.ReadObject``1(System.Type,System.IO.Stream)">
            <summary>
            Reads the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.Parts.MicroJsonTypeSerializer.ReadObjects``1(System.Type,System.IO.Stream)">
            <summary>
            Reads the objects.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.Parts.MicroJsonTypeSerializer.WriteObject``1(System.Type,System.IO.Stream,``0)">
            <summary>
            Writes the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Contoso.Abstract.Parts.MicroJsonTypeSerializer.WriteObjects``1(System.Type,System.IO.Stream,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the objects.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <param name="graphs">The graphs.</param>
        </member>
        <member name="T:System.Abstract.Configuration.ServiceCacheConfiguration">
            <summary>
            ServiceCacheConfiguration
            </summary>
        </member>
        <member name="T:System.Abstract.Parts.BinaryTypeSerializer">
            <summary>
            BinaryTypeSerializer
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.BinaryTypeSerializer.ReadObject``1(System.Type,System.IO.Stream)">
            <summary>
            Reads the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.BinaryTypeSerializer.ReadObjects``1(System.Type,System.IO.Stream)">
            <summary>
            Reads the objects.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.BinaryTypeSerializer.WriteObject``1(System.Type,System.IO.Stream,``0)">
            <summary>
            Writes the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:System.Abstract.Parts.BinaryTypeSerializer.WriteObjects``1(System.Type,System.IO.Stream,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the objects.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="s">The s.</param>
            <param name="graphs">The graphs.</param>
        </member>
        <member name="T:System.Abstract.Parts.BuildManagerTypeCache">
            <summary>
            BuildManagerTypeCache
            </summary>
        </member>
        <member name="M:System.Abstract.Parts.BuildManagerTypeCache.#ctor(System.Abstract.Parts.IBuildManager)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.Parts.BuildManagerTypeCache"/> class.
            </summary>
            <param name="buildManager">The build manager.</param>
        </member>
        <member name="M:System.Abstract.Parts.BuildManagerTypeCache.#ctor(System.Abstract.Parts.IBuildManager,System.Abstract.Parts.ITypeCacheSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.Parts.BuildManagerTypeCache"/> class.
            </summary>
            <param name="buildManager">The build manager.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:System.Abstract.Parts.BuildManagerTypeCache.GetFilteredTypesFromAssemblies(System.String,System.Predicate{System.Type})">
            <summary>
            Gets the filtered types from assemblies.
            </summary>
            <param name="cacheName">Name of the cache.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.Parts.BuildManagerTypeCache.GetFilteredTypesFromAssemblies(System.String,System.Predicate{System.Type},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the filtered types from assemblies.
            </summary>
            <param name="cacheName">Name of the cache.</param>
            <param name="predicate">The predicate.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="P:System.Abstract.Parts.BuildManagerTypeCache.BuildManager">
            <summary>
            Gets the build manager.
            </summary>
        </member>
        <member name="P:System.Abstract.Parts.BuildManagerTypeCache.Serializer">
            <summary>
            Gets the serializer.
            </summary>
        </member>
        <member name="T:System.Abstract.DefaultServiceCacheRegistrationDispatcher">
            <summary>
            DefaultServiceCacheRegistrationDispatcher
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceCacheRegistration.IDispatcher">
            <summary>
            IDispatcher
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceCacheRegistration">
            <summary>
            ServiceCacheRegistration
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemBuilder)">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The key.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemBuilder,System.String[])">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The key.</param>
            <param name="builder">The builder.</param>
            <param name="cacheTags">The dependency array.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemBuilder,System.Func{System.Object,System.Object[],System.String[]})">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The key.</param>
            <param name="builder">The builder.</param>
            <param name="cacheTags">The dependency array.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemBuilder,System.Abstract.CacheItemDependency)">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The key.</param>
            <param name="builder">The builder.</param>
            <param name="dependency">The dependency.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Int32,System.Abstract.CacheItemBuilder,System.String[])">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The key.</param>
            <param name="minuteTimeout">The minute timeout.</param>
            <param name="builder">The builder.</param>
            <param name="cacheTags">The dependency array.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Int32,System.Abstract.CacheItemBuilder,System.Func{System.Object,System.Object[],System.String[]})">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The key.</param>
            <param name="minuteTimeout">The minute timeout.</param>
            <param name="builder">The builder.</param>
            <param name="cacheTags">The dependency array.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Int32,System.Abstract.CacheItemBuilder,System.Abstract.CacheItemDependency)">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The key.</param>
            <param name="minuteTimeout">The minute timeout.</param>
            <param name="builder">The builder.</param>
            <param name="dependency">The dependency.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemPolicy,System.Abstract.CacheItemBuilder)">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The key.</param>
            <param name="itemPolicy">The item policy.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemPolicy,System.Abstract.CacheItemBuilder,System.String[])">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The name.</param>
            <param name="itemPolicy">The cache command.</param>
            <param name="builder">The builder.</param>
            <param name="cacheTags">The dependency array.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemPolicy,System.Abstract.CacheItemBuilder,System.Func{System.Object,System.Object[],System.String[]})">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The name.</param>
            <param name="itemPolicy">The cache command.</param>
            <param name="builder">The builder.</param>
            <param name="cacheTags">The dependency array.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.#ctor(System.String,System.Abstract.CacheItemPolicy,System.Abstract.CacheItemBuilder,System.Abstract.CacheItemDependency)">
            <summary>
            Adds the data source.
            </summary>
            <param name="name">The name.</param>
            <param name="itemPolicy">The cache command.</param>
            <param name="builder">The builder.</param>
            <param name="dependency">The dependency.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.ConsumerOf``1(System.Func{``0,System.Object,System.Object[],System.Func{System.Object},System.Object})">
            <summary>
            Consumeses the specified action.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.ConsumerOf``2(System.Func{``1,System.Object,System.Object[],System.Func{``0},System.Object})">
            <summary>
            Consumeses the specified action.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="action">The action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.GetConsumersFor(System.Object[])">
            <summary>
            Gets the consumers for.
            </summary>
            <param name="messages">The messages.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.AttachRegistrar(System.Abstract.ServiceCacheRegistrar,System.String)">
            <summary>
            Attaches the registrar.
            </summary>
            <param name="registrar">The registrar.</param>
            <param name="absoluteName">Name of the absolute.</param>
        </member>
        <member name="P:System.Abstract.ServiceCacheRegistration.Name">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheRegistration.UseHeaders">
            <summary>
            Gets or sets a value indicating whether [use headers].
            </summary>
            <value>
              <c>true</c> if [use headers]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheRegistration.ItemPolicy">
            <summary>
            Gets or sets the cache command.
            </summary>
            <value>
            The cache command.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheRegistration.Builder">
            <summary>
            Gets or sets the builder.
            </summary>
            <value>
            The builder.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheRegistration.AbsoluteName">
            <summary>
            AbsoluteName
            </summary>
            <value>
            The name of the absolute.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheRegistration.Registrar">
            <summary>
            Gets the registrar.
            </summary>
            <value>
            The registrar.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheRegistration.Namespaces">
            <summary>
            Gets the namespaces.
            </summary>
            <value>
            The namespaces.
            </value>
        </member>
        <member name="P:System.Abstract.ServiceCacheRegistration.Keys">
            <summary>
            Gets the names.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="T:System.Abstract.ServiceCacheRegistration.ConsumerInfo">
            <summary>
            ConsumerInfo
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.ConsumerInfo.ActionInvoke``1(System.Object,System.Object,System.Object[],System.Func{``0})">
            <summary>
            Actions the invoke.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <param name="get">The get.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.ConsumerInfo.Invoke(System.Abstract.IServiceCache,System.Object,System.Abstract.CacheItemHeader)">
            <summary>
            Invokes the specified cache.
            </summary>
            <param name="cache">The cache.</param>
            <param name="tag">The tag.</param>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="P:System.Abstract.ServiceCacheRegistration.ConsumerInfo.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:System.Abstract.ServiceCacheRegistration.IDispatcher">
            <summary>
            IDispatcher
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.IDispatcher.Get``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the specified cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.IDispatcher.Send(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Sends the specified cache.
            </summary>
            <param name="cache">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistration.IDispatcher.Remove(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Removes the specified cache.
            </summary>
            <param name="cache">The cache.</param>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:System.Abstract.DefaultServiceCacheRegistrationDispatcher.Get``1(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Gets the specified cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.DefaultServiceCacheRegistrationDispatcher.Send(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration,System.Object,System.Object[])">
            <summary>
            Sends the specified cache.
            </summary>
            <param name="cache">The cache.</param>
            <param name="registration">The registration.</param>
            <param name="tag">The tag.</param>
            <param name="messages">The messages.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:System.Abstract.DefaultServiceCacheRegistrationDispatcher.Remove(System.Abstract.IServiceCache,System.Abstract.IServiceCacheRegistration)">
            <summary>
            Removes the specified cache.
            </summary>
            <param name="cache">The cache.</param>
            <param name="registration">The registration.</param>
        </member>
        <member name="T:System.Abstract.PlatformWebManagerDebugger">
            <summary>
            PlatformWebManagerDebugger
            </summary>
        </member>
        <member name="M:System.Abstract.PlatformWebManagerDebugger.DebugStarted">
            <summary>
            Debugs the started.
            </summary>
        </member>
        <member name="T:System.Abstract.PlatformWebManagerDebugger.DebuggerFlags">
            <summary>
            DebuggerFlags
            </summary>
        </member>
        <member name="T:System.EnvironmentEx2">
            <summary>
            EnvironmentEx2
            </summary>
        </member>
        <member name="M:System.EnvironmentEx2.GetResourceFromDefault(System.String)">
            <summary>
            Gets the resource from default.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:System.EnvironmentEx2.GetResourceString(System.String)">
            <summary>
            Gets the resource string.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:System.EnvironmentEx2.GetResourceString(System.String,System.Object[])">
            <summary>
            Gets the resource string.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="T:System.PlatformProductID">
            <summary>
            PlatformProductID
            </summary>
        </member>
        <member name="F:System.PlatformProductID.Workstation">
            <summary>
            Workstation
            </summary>
        </member>
        <member name="F:System.PlatformProductID.DomainController">
            <summary>
            DomainController
            </summary>
        </member>
        <member name="F:System.PlatformProductID.Server">
            <summary>
            Server
            </summary>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            ExceptionEx
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.IsCritical(System.Exception)">
            <summary>
            Determines whether the specified exception is critical.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
              <c>true</c> if the specified exception is critical; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.ExceptionExtensions.PrepareForRethrow(System.Exception)">
            <summary>
            Prepares for rethrow.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:System.ExceptionExtensions.PrepareForRethrow(System.Exception,System.Boolean)">
            <summary>
            Prepares for rethrow.
            </summary>
            <param name="exception">The exception.</param>
            <param name="remoting">if set to <c>true</c> [remoting].</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.ServiceLocatorResolutionException">
            <summary>
            ServiceLocatorResolutionException
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceLocatorResolutionException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceLocatorResolutionException"/> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorResolutionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceLocatorResolutionException"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="arg0">The arg0.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorResolutionException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceLocatorResolutionException"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Abstract.ServiceLocatorResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.ServiceLocatorResolutionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
              </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
              </exception>
        </member>
        <member name="P:System.Abstract.ServiceLocatorResolutionException.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="T:System.Patterns.ReleaseManagement.ReleaseManagementManager">
            <summary>
            ReleaseManagementManager
            </summary>
        </member>
        <member name="M:System.Patterns.ReleaseManagement.ReleaseManagementManager.LoadFromConfiguration(System.Patterns.ReleaseManagement.ReleaseManagementConfiguration)">
            <summary>
            Loads from configuration.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:System.Abstract.IPublishingServiceBus">
            <summary>
            IPublishingServiceBus
            </summary>
        </member>
        <member name="M:System.Abstract.IPublishingServiceBus.Publish(System.Object[])">
            <summary>
            Publishes the specified messages.
            </summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:System.Abstract.IPublishingServiceBus.Subscribe(System.Type,System.Predicate{System.Object})">
            <summary>
            Subscribes the specified message type.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:System.Abstract.IPublishingServiceBus.Unsubscribe(System.Type)">
            <summary>
            Unsubscribes the specified message type.
            </summary>
            <param name="messageType">Type of the message.</param>
        </member>
        <member name="T:System.Abstract.IServiceBusCallback">
            <summary>
            IServiceBusCallback
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceBusCallback.Register``1(System.Action{``0})">
            <summary>
            Registers the specified callback.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:System.Abstract.IServiceBusCallback.Register(System.AsyncCallback,System.Object)">
            <summary>
            Registers the specified callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.EventSourcing.IOfflineSnaphotQuery">
            <summary>
            IOfflineSnaphotQuery
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.IOfflineSnaphotQuery.GetAggregatesToSnapshot(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets the aggregates to snapshot.
            </summary>
            <param name="aggregateTypes">The aggregate types.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.ServiceCacheRegistrar">
            <summary>
            ServiceCacheRegistrar
            </summary>
            <remarks>
            [Wrap]SC\\{Anchor.FullName}::{Registration.Name}[#]
            ServiceCacheRegistrar._namePrefix - SC\\{Anchor.FullName}::
            Registration.AbsoluteName = SC\\{Anchor.FullName}::{Registration.Name}
            </remarks>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Get``1">
            <summary>
            Gets this instance.
            </summary>
            <typeparam name="TAnchor">The type of the anchor.</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Get(System.Type)">
            <summary>
            Gets the specified anchor type.
            </summary>
            <param name="anchorType">Type of the anchor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.RegisterAllBelow``1">
            <summary>
            Registers all below.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.RegisterAllBelow(System.Type)">
            <summary>
            Registers all below.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Register(System.String,System.Abstract.CacheItemBuilder,System.String[])">
            <summary>
            Registers the specified registration.
            </summary>
            <param name="name">The registration name.</param>
            <param name="builder">The builder.</param>
            <param name="cacheTags">The cache tags.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Register(System.String,System.Int32,System.Abstract.CacheItemBuilder,System.String[])">
            <summary>
            Registers the specified registration.
            </summary>
            <param name="name">The registration name.</param>
            <param name="minuteTimeout">The minute timeout.</param>
            <param name="builder">The builder.</param>
            <param name="cacheTags">The cache tags.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Register(System.String,System.Abstract.CacheItemPolicy,System.Abstract.CacheItemBuilder,System.String[])">
            <summary>
            Registers the specified registration.
            </summary>
            <param name="name">The registration name.</param>
            <param name="itemPolicy">The cache command.</param>
            <param name="builder">The builder.</param>
            <param name="cacheTags">The cache tags.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Register(System.Abstract.IServiceCacheRegistration)">
            <summary>
            Registers the specified registration.
            </summary>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Clear">
            <summary>
            Clears this all registrations.
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Contains(System.Abstract.IServiceCacheRegistration)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="registration">The registration.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Contains(System.String)">
            <summary>
            Determines whether the specified name has been registered.
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if the specified name has been registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Remove(System.Abstract.IServiceCacheRegistration)">
            <summary>
            Removes the specified registration.
            </summary>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.Remove(System.String)">
            <summary>
            Removes the specified registration.
            </summary>
            <param name="name">The registration name.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.TryGet(System.Type,System.Abstract.ServiceCacheRegistrar@,System.Boolean)">
            <summary>
            Tries the get.
            </summary>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrar">The registrar.</param>
            <param name="createIfRequired">if set to <c>true</c> [create if required].</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.TryGetValue(System.Abstract.IServiceCacheRegistration,System.Int32@,System.Abstract.IServiceCacheRegistration@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="registration">The registration.</param>
            <param name="recurses">The recurses.</param>
            <param name="foundRegistration">The found registration.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheRegistrar.TryGetValue(System.Type,System.String,System.Int32@,System.Abstract.IServiceCacheRegistration@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="anchorType">Type of the anchor.</param>
            <param name="registrationName">Name of the registration.</param>
            <param name="recurses">The recurses.</param>
            <param name="foundRegistration">The found registration.</param>
            <returns></returns>
        </member>
        <member name="P:System.Abstract.ServiceCacheRegistrar.AnchorType">
            <summary>
            Gets or sets the type of the anchor.
            </summary>
            <value>
            The type of the anchor.
            </value>
        </member>
        <member name="T:System.Abstract.ServiceCacheRegistrar.IDispatch">
            <summary>
            IDispatch
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLogManager">
            <summary>
            ServiceLogManager
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceLogManager.EmptyServiceLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceLogManager.SetProvider(System.Func{System.Abstract.IServiceLog})">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogManager.SetProvider(System.Func{System.Abstract.IServiceLog},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceLog,System.Action{System.Abstract.IServiceLog},System.Abstract.ServiceLogManagerDebugger}.ISetupDescriptor)">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogManager.MakeByProvider(System.Func{System.Abstract.IServiceLog})">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogManager.MakeByProvider(System.Func{System.Abstract.IServiceLog},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceLog,System.Action{System.Abstract.IServiceLog},System.Abstract.ServiceLogManagerDebugger}.ISetupDescriptor)">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogManager.EnsureRegistration">
            <summary>
            Ensures the registration.
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceLogManager.GetSetupDescriptor(System.Lazy{System.Abstract.IServiceLog})">
            <summary>
            Gets the setup descriptor.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogManager.Get``1">
            <summary>
            Gets this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLogManager.Get(System.String)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:System.Abstract.ServiceLogManager.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.Micro.JsonPropertyAttribute">
            <summary>
            JsonPropertyAttribute
            </summary>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Contoso.Abstract.Micro.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.Micro.JsonPropertyAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Contoso.Abstract.Micro.JsonPropertyAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Contoso.Abstract.Micro.JsonPropertyAttribute.SerializeAs">
            <summary>
            Gets or sets the serialize as.
            </summary>
            <value>
            The serialize as.
            </value>
        </member>
        <member name="P:Contoso.Abstract.Micro.JsonPropertyAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Contoso.Abstract.Micro.JsonPropertyAttribute.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>
            The converter.
            </value>
        </member>
        <member name="T:Contoso.Abstract.ITraceSourceServiceLog">
            <summary>
            ITraceSourceServiceLog
            </summary>
        </member>
        <member name="P:Contoso.Abstract.ITraceSourceServiceLog.Log">
            <summary>
            Gets the log.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.TraceSourceServiceLog">
            <summary>
            TraceSourceServiceLog
            </summary>
        </member>
        <member name="M:Contoso.Abstract.TraceSourceServiceLog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.TraceSourceServiceLog"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Contoso.Abstract.TraceSourceServiceLog.#ctor(System.String,System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.TraceSourceServiceLog"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultLevel">The default level.</param>
        </member>
        <member name="M:Contoso.Abstract.TraceSourceServiceLog.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Contoso.Abstract.TraceSourceServiceLog.Get(System.String)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.TraceSourceServiceLog.Get(System.Type)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.TraceSourceServiceLog.Write(System.Abstract.ServiceLog.LogLevel,System.Exception,System.String)">
            <summary>
            Writes the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
        </member>
        <member name="P:Contoso.Abstract.TraceSourceServiceLog.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Contoso.Abstract.TraceSourceServiceLog.Log">
            <summary>
            Gets the log.
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceCacheManager">
            <summary>
            ServiceCacheManager
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheManager.SetProvider(System.Func{System.Abstract.IServiceCache})">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheManager.SetProvider(System.Func{System.Abstract.IServiceCache},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceCache,System.Action{System.Abstract.IServiceCache},System.Abstract.ServiceCacheManagerDebugger}.ISetupDescriptor)">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheManager.MakeByProvider(System.Func{System.Abstract.IServiceCache})">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheManager.MakeByProvider(System.Func{System.Abstract.IServiceCache},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceCache,System.Action{System.Abstract.IServiceCache},System.Abstract.ServiceCacheManagerDebugger}.ISetupDescriptor)">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceCacheManager.EnsureRegistration">
            <summary>
            Ensures the registration.
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceCacheManager.GetSetupDescriptor(System.Lazy{System.Abstract.IServiceCache})">
            <summary>
            Gets the setup descriptor.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="P:System.Abstract.ServiceCacheManager.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="T:System.Abstract.CacheItemDependency">
            <summary>
            CacheItemDependency
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLocatorManager">
            <summary>
            ServiceLocatorManager
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceLocatorManager.SetProvider(System.Func{System.Abstract.IServiceLocator})">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorManager.SetProvider(System.Func{System.Abstract.IServiceLocator},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceLocator,System.Action{System.Abstract.IServiceLocator},System.Abstract.ServiceLocatorManagerDebugger}.ISetupDescriptor)">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorManager.MakeByProvider(System.Func{System.Abstract.IServiceLocator})">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorManager.MakeByProvider(System.Func{System.Abstract.IServiceLocator},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IServiceLocator,System.Action{System.Abstract.IServiceLocator},System.Abstract.ServiceLocatorManagerDebugger}.ISetupDescriptor)">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorManager.EnsureRegistration">
            <summary>
            Ensures the registration.
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceLocatorManager.GetSetupDescriptor(System.Lazy{System.Abstract.IServiceLocator})">
            <summary>
            Gets the setup descriptor.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorManager.HasIgnoreServiceLocator(System.Object)">
            <summary>
            Determines whether [has ignore service locator] [the specified instance].
            </summary>
            <param name="instance">The instance.</param>
            <returns>
              <c>true</c> if [has ignore service locator] [the specified instance]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorManager.HasIgnoreServiceLocator``1">
            <summary>
            Determines whether [has ignore service locator].
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>
              <c>true</c> if [has ignore service locator]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Abstract.ServiceLocatorManager.HasIgnoreServiceLocator(System.Type)">
            <summary>
            Determines whether [has ignore service locator] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [has ignore service locator] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:System.Abstract.ServiceLocatorManager.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.EmptyServiceLog">
            <summary>
            EmptyServiceLog
            </summary>
        </member>
        <member name="M:Contoso.Abstract.EmptyServiceLog.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Contoso.Abstract.EmptyServiceLog.Get(System.String)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.EmptyServiceLog.Get(System.Type)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.EmptyServiceLog.Write(System.Abstract.ServiceLog.LogLevel,System.Exception,System.String)">
            <summary>
            Writes the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="ex">The ex.</param>
            <param name="s">The s.</param>
        </member>
        <member name="P:Contoso.Abstract.EmptyServiceLog.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:System.Abstract.Configuration.ServiceBus.EndpointElementCollection">
            <summary>
            EndpointElementCollection
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLocatorNamespaceBehaviorWrapper">
            <summary>
            ServiceLocatorNamespaceBehaviorWrapper
            </summary>
        </member>
        <member name="T:System.Abstract.IDistributedServiceCache">
            <summary>
            IDistributedServiceCache
            </summary>
        </member>
        <member name="T:System.Abstract.CacheItemHeader">
            <summary>
            CacheItemHeader
            </summary>
        </member>
        <member name="P:System.Abstract.CacheItemHeader.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="P:System.Abstract.CacheItemHeader.Values">
            <summary>
            Values
            </summary>
        </member>
        <member name="T:System.Abstract.EventSourceManager">
            <summary>
            EventSourceManager
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourceManager.SetProvider(System.Func{System.Abstract.IEventSource})">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourceManager.SetProvider(System.Func{System.Abstract.IEventSource},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IEventSource,System.Action{System.Abstract.IEventSource},System.Abstract.EventSourceManagerDebugger}.ISetupDescriptor)">
            <summary>
            Sets the provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourceManager.MakeByProvider(System.Func{System.Abstract.IEventSource})">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourceManager.MakeByProvider(System.Func{System.Abstract.IEventSource},System.Abstract.Parts.ServiceManagerBase{System.Abstract.IEventSource,System.Action{System.Abstract.IEventSource},System.Abstract.EventSourceManagerDebugger}.ISetupDescriptor)">
            <summary>
            Makes the by provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="setupDescriptor">The setup descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourceManager.EnsureRegistration">
            <summary>
            Ensures the registration.
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourceManager.GetSetupDescriptor(System.Lazy{System.Abstract.IEventSource})">
            <summary>
            Gets the setup descriptor.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="P:System.Abstract.EventSourceManager.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="T:System.NparamsExtensions">
            <summary>
            NparamsExtensions
            </summary>
        </member>
        <member name="M:System.NparamsExtensions.Add(System.Nparams,System.String,System.Object)">
            <summary>
            Adds the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.NparamsExtensions.ContainsKey(System.Nparams,System.String)">
            <summary>
            Determines whether the specified source contains key.
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified source contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.NparamsExtensions.Remove(System.Nparams,System.String)">
            <summary>
            Removes the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.HasValue(System.Nparams)">
            <summary>
            Determines whether the specified source has value.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source has value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.NparamsExtensions.Count(System.Nparams)">
            <summary>
            Counts the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Keys(System.Nparams)">
            <summary>
            Keyses the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Values``1(System.Nparams)">
            <summary>
            Valueses the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Values(System.Nparams)">
            <summary>
            Valueses the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.TryGetValue``1(System.Nparams,System.String,``0@)">
            <summary>
            Tries the get value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.TryGetValue(System.Nparams,System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Get``1(System.Nparams)">
            <summary>
            Gets the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Get``1(System.Nparams,System.String)">
            <summary>
            Gets the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Get``1(System.Nparams,System.String,``0)">
            <summary>
            Gets the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Get(System.Nparams,System.String,System.Object)">
            <summary>
            Gets the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Get(System.Nparams,System.String)">
            <summary>
            Gets the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Set``1(System.Nparams,``0)">
            <summary>
            Sets the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.NparamsExtensions.Set``1(System.Nparams,System.String,``0)">
            <summary>
            Sets the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.NparamsExtensions.Set(System.Nparams,System.String,System.Object)">
            <summary>
            Sets the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.NparamsExtensions.Clear(System.Nparams)">
            <summary>
            Clears the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:System.NparamsExtensions.ToDictionary(System.Nparams)">
            <summary>
            Toes the dictionary.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.AddRange(System.Nparams,System.Nparams)">
            <summary>
            Adds the range.
            </summary>
            <param name="source">The source.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.NparamsExtensions.AddRange(System.Nparams,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds the range.
            </summary>
            <param name="source">The source.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:System.NparamsExtensions.ToStringArray(System.Nparams)">
            <summary>
            Toes the string array.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Slice``1(System.Nparams,System.String)">
            <summary>
            Slices the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsExtensions.Slice``1(System.Nparams,System.String,``0)">
            <summary>
            Slices the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.Configuration.ServiceLogConfiguration">
            <summary>
            ServiceLogConfiguration
            </summary>
        </member>
        <member name="T:System.Abstract.Configuration.ServiceLocatorConfiguration">
            <summary>
            ServiceLocatorConfiguration
            </summary>
        </member>
        <member name="T:System.Abstract.IIgnoreServiceLocator">
            <summary>
            IIgnoreServiceLocator
            </summary>
        </member>
        <member name="T:System.Abstract.IEventBus">
            <summary>
            IEventBus
            </summary>
        </member>
        <member name="T:System.Abstract.EventBus">
            <summary>
            EventBus
            </summary>
        </member>
        <member name="M:System.Abstract.EventBus.#ctor(System.Abstract.IServiceBus)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventBus"/> struct.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:System.Abstract.EventBus.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:System.Abstract.EventBus.CreateMessage``1(System.Action{``0})">
            <summary>
            Creates the message.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="messageBuilder">The message builder.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventBus.Send(System.Abstract.IServiceBusEndpoint,System.Object[])">
            <summary>
            Sends the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <param name="messages">The messages.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventBus.Reply(System.Object[])">
            <summary>
            Replies the specified messages.
            </summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="T:System.DeploymentEnvironment">
            <summary>
            DeploymentEnvironment
            </summary>
        </member>
        <member name="F:System.DeploymentEnvironment.ProofOfConcept">
            <summary>
            ProofOfConcept
            </summary>
        </member>
        <member name="F:System.DeploymentEnvironment.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="F:System.DeploymentEnvironment.Development">
            <summary>
            Development
            </summary>
        </member>
        <member name="F:System.DeploymentEnvironment.AlphaTesting">
            <summary>
            AlphaTesting
            </summary>
        </member>
        <member name="F:System.DeploymentEnvironment.BetaTesting">
            <summary>
            BetaTesting
            </summary>
        </member>
        <member name="F:System.DeploymentEnvironment.Production">
            <summary>
            Production
            </summary>
        </member>
        <member name="T:Contoso.Abstract.IMicroServiceLocator">
            <summary>
            IMicroServiceLocator
            </summary>
        </member>
        <member name="P:Contoso.Abstract.IMicroServiceLocator.Container">
            <summary>
            Gets the container.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.MicroServiceLocator">
            <summary>
            MicroServiceLocator
            </summary>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.MicroServiceLocator"/> class.
            </summary>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.MicroServiceLocator"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.Type,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Contoso.Abstract.MicroServiceLocator"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.CreateChild(System.Object)">
            <summary>
            Creates the child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.GetUnderlyingContainer``1">
            <summary>
            Gets the underlying container.
            </summary>
            <typeparam name="TContainer">The type of the container.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.Resolve``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.Resolve``1(System.String)">
            <summary>
            Resolves the specified name.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.Resolve(System.Type)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.Resolve(System.Type,System.String)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.ResolveAll``1">
            <summary>
            Resolves all.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.ResolveAll(System.Type)">
            <summary>
            Resolves all.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.Inject``1(``0)">
            <summary>
            Injects the specified instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.Release(System.Object)">
            <summary>
            Releases the specified instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.TearDown``1(``0)">
            <summary>
            Tears down.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Contoso.Abstract.MicroServiceLocator.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:Contoso.Abstract.MicroServiceLocator.Registrar">
            <summary>
            Gets the registrar.
            </summary>
        </member>
        <member name="P:Contoso.Abstract.MicroServiceLocator.Container">
            <summary>
            Gets the container.
            </summary>
        </member>
        <member name="T:Contoso.Abstract.EventSourcing.MemoryAggregateRootSnapshotStore">
            <summary>
            MemoryAggregateRootSnapshotStore
            </summary>
        </member>
        <member name="M:Contoso.Abstract.EventSourcing.MemoryAggregateRootSnapshotStore.GetLatestSnapshot``1(System.Object)">
            <summary>
            Gets the latest snapshot.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateID">The aggregate ID.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.EventSourcing.MemoryAggregateRootSnapshotStore.SaveSnapshot(System.Type,System.Abstract.EventSourcing.AggregateRootSnapshot)">
            <summary>
            Saves the snapshot.
            </summary>
            <param name="aggregateType">Type of the aggregate.</param>
            <param name="snapshot">The snapshot.</param>
        </member>
        <member name="P:Contoso.Abstract.EventSourcing.MemoryAggregateRootSnapshotStore.InlineSnapshotPredicate">
            <summary>
            Gets the inline snapshot predicate.
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceBus">
            <summary>
            ServiceBus
            </summary>
        </member>
        <member name="F:System.Abstract.ServiceBus.SelfEndpoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceBus.Send``1(System.Action{``0})">
            <summary>
            Sends the specified message builder.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="messageBuilder">The message builder.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBus.Send``1(System.String,System.Action{``0})">
            <summary>
            Sends the specified destination.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="destination">The destination.</param>
            <param name="messageBuilder">The message builder.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBus.Send``1(System.Abstract.IServiceBusEndpoint,System.Action{``0})">
            <summary>
            Sends the specified destination.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="destination">The destination.</param>
            <param name="messageBuilder">The message builder.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBus.Send(System.Object[])">
            <summary>
            Sends the specified messages.
            </summary>
            <param name="messages">The messages.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBus.Send(System.String,System.Object[])">
            <summary>
            Sends the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <param name="messages">The messages.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.ServiceBus.Send(System.Abstract.IServiceBusEndpoint,System.Object[])">
            <summary>
            Sends the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <param name="messages">The messages.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.LiteralServiceBusEndpoint">
            <summary>
            LiteralServiceBusEndpoint
            </summary>
        </member>
        <member name="M:System.Abstract.LiteralServiceBusEndpoint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.LiteralServiceBusEndpoint"/> class.
            </summary>
            <param name="literal">The literal.</param>
        </member>
        <member name="P:System.Abstract.LiteralServiceBusEndpoint.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLogManagerDebugger">
            <summary>
            ServiceLogManagerDebugger
            </summary>
        </member>
        <member name="M:System.Abstract.ServiceLogManagerDebugger.DebugStarted">
            <summary>
            Debugs the started.
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceLogManagerDebugger.DebuggerFlags">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.NparamsManager">
            <summary>
            NparamsManager
            </summary>
        </member>
        <member name="M:System.NparamsManager.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.NparamsManager.Parse(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parses the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsManager.Parse(System.String[])">
            <summary>
            Parses the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:System.NparamsManager.Parse(System.Object)">
            <summary>
            Parses the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.EventSourcing.AggregateRootSnapshot">
            <summary>
            AggregateRootSnapshot
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootSnapshot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSourcing.AggregateRootSnapshot"/> class.
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.AggregateRootSnapshot.#ctor(System.Abstract.EventSourcing.AggregateRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Abstract.EventSourcing.AggregateRootSnapshot"/> class.
            </summary>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateRootSnapshot.AggregateID">
            <summary>
            Gets or sets the aggregate ID.
            </summary>
            <value>
            The aggregate ID.
            </value>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateRootSnapshot.LastEventDate">
            <summary>
            Gets or sets the last event date.
            </summary>
            <value>
            The last event date.
            </value>
        </member>
        <member name="P:System.Abstract.EventSourcing.AggregateRootSnapshot.LastEventSequence">
            <summary>
            Gets or sets the last event sequence.
            </summary>
            <value>
            The last event sequence.
            </value>
        </member>
        <member name="T:System.Abstract.EventSourcing.AggregateRootOptions">
            <summary>
            AggregateRootOptions
            </summary>
        </member>
        <member name="F:System.Abstract.EventSourcing.AggregateRootOptions.UseStorageBasedSequencing">
            <summary>
            UseStorageBasedSequencing
            </summary>
        </member>
        <member name="T:Contoso.Abstract.Micro.JsonSerializableAttribute">
            <summary>
            JsonSerializableAttribute
            </summary>
        </member>
        <member name="P:Contoso.Abstract.Micro.JsonSerializableAttribute.SerializeAs">
            <summary>
            Gets or sets the serialize as.
            </summary>
            <value>
            The serialize as.
            </value>
        </member>
        <member name="P:Contoso.Abstract.Micro.JsonSerializableAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="T:System.Configuration.CodecConverter`1">
            <summary>
            CodecConverter
            </summary>
        </member>
        <member name="M:System.Configuration.CodecConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="ctx">The CTX.</param>
            <param name="ci">The ci.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.CodecConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to.
            </summary>
            <param name="ctx">The CTX.</param>
            <param name="ci">The ci.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:System.Configuration.ConfigurationElementCollectionEx">
            <summary>
            ConfigurationElementCollectionEx
            </summary>
        </member>
        <member name="T:System.Configuration.ConfigurationElementCollectionEx.TypeElement">
            <summary>
            TypeElement
            </summary>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx.TypeElement.Name">
            <summary>
            Gets or sets the name of the configuration setting.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx.TypeElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:System.Configuration.ConfigurationElementCollectionEx.AssemblyElement">
            <summary>
            AssemblyElement
            </summary>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx.AssemblyElement.Name">
            <summary>
            Gets or sets the name of the configuration setting.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx.AssemblyElement.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="T:System.Configuration.ConfigurationElementCollectionEx.NameValueElement">
            <summary>
            NameValueElement
            </summary>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx.NameValueElement.Name">
            <summary>
            Gets or sets the name of the configuration setting.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:System.Configuration.ConfigurationElementCollectionEx.NameValueElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:System.Linq.Expressions.ExpressionEx">
            <summary>
            ExpressionEx
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionEx.CovariantCast``2(System.Linq.Expressions.Expression{System.Action{``1}})">
            <summary>
            Covariants the cast.
            </summary>
            <typeparam name="TBase">The type of the base.</typeparam>
            <typeparam name="TDerived">The type of the derived.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionEx.CovariantCast``2(System.Reflection.MethodInfo)">
            <summary>
            Covariants the cast.
            </summary>
            <typeparam name="TBase">The type of the base.</typeparam>
            <typeparam name="TDerived">The type of the derived.</typeparam>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionEx.CovariantAccessor``3(System.Func{``0,``2})">
            <summary>
            Covariants the accessor.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TBase">The type of the base.</typeparam>
            <typeparam name="TDerived">The type of the derived.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionEx.CovariantAccessor``3(System.Reflection.MethodInfo)">
            <summary>
            Covariants the accessor.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TBase">The type of the base.</typeparam>
            <typeparam name="TDerived">The type of the derived.</typeparam>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:System.Threading.LazyThreadSafetyMode">
            <summary>
            LazyThreadSafetyMode
            </summary>
        </member>
        <member name="F:System.Threading.LazyThreadSafetyMode.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
            <summary>
            
            </summary>
        </member>
        <member name="T:Contoso.Abstract.EventSourcing.MemoryEventStore">
            <summary>
            MemoryEventStore
            </summary>
        </member>
        <member name="M:Contoso.Abstract.EventSourcing.MemoryEventStore.GetEventsByID(System.Object,System.Int32)">
            <summary>
            Gets the events by ID.
            </summary>
            <param name="aggregateID">The aggregate ID.</param>
            <param name="startSequence">The start sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.EventSourcing.MemoryEventStore.GetEventsByEventTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets the events by event types.
            </summary>
            <param name="eventTypes">The event types.</param>
            <returns></returns>
        </member>
        <member name="M:Contoso.Abstract.EventSourcing.MemoryEventStore.SaveEvents(System.Object,System.Collections.Generic.IEnumerable{System.Abstract.EventSourcing.Event})">
            <summary>
            Saves the events.
            </summary>
            <param name="aggregateID">The aggregate ID.</param>
            <param name="events">The events.</param>
        </member>
        <member name="T:System.Configuration.AssemblyNameConverter">
            <summary>
            AssemblyNameConverter
            </summary>
        </member>
        <member name="M:System.Configuration.AssemblyNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="ctx">The CTX.</param>
            <param name="ci">The ci.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:System.Configuration.AssemblyNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to.
            </summary>
            <param name="ctx">The CTX.</param>
            <param name="ci">The ci.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:System.Abstract.Configuration.ServiceBusConfiguration">
            <summary>
            ServiceBusConfiguration
            </summary>
        </member>
        <member name="P:System.Abstract.Configuration.ServiceBusConfiguration.Endpoints">
            <summary>
            Gets the endpoints.
            </summary>
        </member>
        <member name="T:System.Abstract.ServiceInjectionConstructorAttribute">
            <summary>
            ServiceInjectionConstructorAttribute
            </summary>
        </member>
        <member name="T:System.Abstract.IgnoreServiceLocatorAttribute">
            <summary>
            IgnoreServiceLocatorAttribute
            </summary>
        </member>
        <member name="M:System.Abstract.IgnoreServiceLocatorAttribute.HasIgnoreServiceLocator(System.Type)">
            <summary>
            Determines whether [has ignore service locator] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [has ignore service locator] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:System.Abstract.IServiceBusHostBootstrap">
            <summary>
            IServiceBusHostBootstrap
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceBusHostBootstrap.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:System.Abstract.IServiceBusHostBootstrap.Open(System.Abstract.IServiceBus)">
            <summary>
            Opens the specified bus.
            </summary>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:System.Abstract.IServiceBusHostBootstrap.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="T:System.Abstract.IEventHandler`1">
            <summary>
            IEventHandler
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:System.Abstract.IEventHandler`1.Handle(`0)">
            <summary>
            Handles the specified @event.
            </summary>
            <param name="event">The @event.</param>
        </member>
        <member name="T:System.Abstract.EventSourcing.EventSourcingExtensions">
            <summary>
            EventSourcingExtensions
            </summary>
        </member>
        <member name="M:System.Abstract.EventSourcing.EventSourcingExtensions.GetByID``1(System.Abstract.EventSourcing.IAggregateRootRepository,System.Object)">
            <summary>
            Gets the by ID.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="repository">The repository.</param>
            <param name="aggregateID">The aggregate ID.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.EventSourcingExtensions.GetByID(System.Abstract.EventSourcing.IAggregateRootRepository,System.Type,System.Object)">
            <summary>
            Gets the by ID.
            </summary>
            <param name="repository">The repository.</param>
            <param name="aggregateType">Type of the aggregate.</param>
            <param name="aggregateID">The aggregate ID.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.EventSourcingExtensions.GetByID(System.Abstract.EventSourcing.IAggregateRootRepository,System.Type,System.Object,System.Abstract.EventSourcing.AggregateRootQueryOptions)">
            <summary>
            Gets the by ID.
            </summary>
            <param name="repository">The repository.</param>
            <param name="aggregateType">Type of the aggregate.</param>
            <param name="aggregateID">The aggregate ID.</param>
            <param name="queryOptions">The query options.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.EventSourcingExtensions.GetManyByIDs(System.Abstract.EventSourcing.IAggregateRootRepository,System.Collections.Generic.IEnumerable{System.Object},System.Type,System.Abstract.EventSourcing.AggregateRootQueryOptions)">
            <summary>
            Gets the many by I ds.
            </summary>
            <param name="repository">The repository.</param>
            <param name="aggregateIDs">The aggregate I ds.</param>
            <param name="aggregateType">Type of the aggregate.</param>
            <param name="queryOptions">The query options.</param>
            <returns></returns>
        </member>
        <member name="M:System.Abstract.EventSourcing.EventSourcingExtensions.MakeSnapshot(System.Abstract.EventSourcing.IAggregateRootRepository,System.Abstract.EventSourcing.AggregateRoot)">
            <summary>
            Makes the snapshot.
            </summary>
            <param name="repository">The repository.</param>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Abstract.EventSourcing.EventSourcingExtensions.BehaveAs``1(System.Abstract.EventSourcing.IAggregateRootRepository)">
            <summary>
            Behaves as.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="T:System.IO.WrapTextReader">
            <summary>
            WrapTextReader
            </summary>
        </member>
        <member name="M:System.IO.WrapTextReader.#ctor(System.IO.TextReader,System.IO.WrapTextReader.WrapOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.WrapTextReader"/> class.
            </summary>
            <param name="r">The r.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:System.IO.WrapTextReader.Wrap(System.IO.TextReader)">
            <summary>
            Wraps the specified r.
            </summary>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.WrapTextReader.Wrap(System.IO.TextReader,System.IO.WrapTextReader.WrapOptions)">
            <summary>
            Wraps the specified r.
            </summary>
            <param name="r">The r.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.WrapTextReader.Close">
            <summary>
            Closes the <see cref="T:System.IO.TextReader"/> and releases any system resources associated with the TextReader.
            </summary>
        </member>
        <member name="M:System.IO.WrapTextReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.TextReader"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.IO.WrapTextReader.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.IO.WrapTextReader.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:System.IO.WrapTextReader.Peek">
            <summary>
            Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the input stream.
            </summary>
            <returns>
            An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"/> is closed. </exception>
              
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.IO.WrapTextReader.Read">
            <summary>
            Reads the next character from the input stream and advances the character position by one character.
            </summary>
            <returns>
            The next character from the input stream, or -1 if no more characters are available. The default implementation returns -1.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"/> is closed. </exception>
              
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:System.IO.WrapTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a maximum of <paramref name="count"/> characters from the current stream and writes the data to <paramref name="buffer"/>, beginning at <paramref name="index"/>.
            </summary>
            <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index"/> and (<paramref name="index"/> + <paramref name="count"/> - 1) replaced by the characters read from the current source.</param>
            <param name="index">The place in <paramref name="buffer"/> at which to begin writing.</param>
            <param name="count">The maximum number of characters to read. If the end of the stream is reached before <paramref name="count"/> of characters is read into <paramref name="buffer"/>, the current method returns.</param>
            <returns>
            The number of characters that have been read. The number will be less than or equal to <paramref name="count"/>, depending on whether the data is available within the stream. This method returns zero if called when no more characters are left to read.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null. </exception>
              
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>. </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> or <paramref name="count"/> is negative. </exception>
              
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"/> is closed. </exception>
              
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="P:System.IO.WrapTextReader.R">
            <summary>
            Gets or sets the R.
            </summary>
            <value>
            The R.
            </value>
        </member>
        <member name="P:System.IO.WrapTextReader.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="T:System.IO.WrapTextReader.WrapOptions">
            <summary>
            WrapOptions
            </summary>
        </member>
        <member name="F:System.IO.WrapTextReader.WrapOptions.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
            <summary>
            ConditionalWeakTable
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
            <summary>
            Gets the or create value.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
            <summary>
            Gets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="createValueCallback">The create value callback.</param>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValueWorkerForLazyValueHelper``1(``0,`1@,System.Boolean)">
            <summary>
            Tries the get value worker for lazy value helper.
            </summary>
            <typeparam name="TLazyKey">The type of the lazy key.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="isValueCreated">if set to <c>true</c> [is value created].</param>
            <returns></returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
            <summary>
            
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
    </members>
</doc>
